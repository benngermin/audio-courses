{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"expanded-player-updates.md":{"content":"# Expanded Player Control Updates\n\n## Summary of Changes\nAll control icons in the expanded player have been significantly increased in size and boldness to match the podcast app design.\n\n## Main Playback Controls\n- **Play/Pause Button**: 80x80px (mobile) / 96x96px (desktop)\n- **Skip Buttons**: 64x64px (mobile) / 80x80px (desktop)\n- **Skip Icons**: 48x48px (mobile) / 56x56px (desktop)\n- **Skip Numbers**: 16px (mobile) / 18px (desktop) font size\n- **Icon Stroke Width**: Increased to 3 for all icons\n\n## Bottom Control Row\n- **Volume Button**: 56x56px (mobile) / 64x64px (desktop)\n- **Cast Button**: 56x56px (mobile) / 64x64px (desktop)  \n- **Speed Button**: 56x56px (mobile) / 64x64px (desktop)\n- **Control Icons**: 36x36px (mobile) / 40x40px (desktop)\n- **Icon Stroke Width**: Increased to 3 for bold appearance\n\n## Visual Improvements\n- Larger touch targets for better mobile usability\n- Bold stroke widths matching podcast app aesthetic\n- Increased gap between controls for cleaner layout\n- Prominent skip button numbers inside the icons\n- Speed indicator badge size increased\n- Volume slider controls enlarged for easier interaction\n\n## Design Consistency\n- Maintains orange primary color (#ff6b35)\n- Consistent hover states with subtle backgrounds\n- Responsive scaling for mobile and desktop\n- Minimum 44px touch targets maintained throughout","size_bytes":1350},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Audio Learning Platform\n\n## Overview\n\nThis is a mobile-first audio learning platform built for The Institutes educational content consumption. Users access the platform directly from Moodle LMS via SSO authentication, immediately landing on their course assignments page. The application allows users to consume course materials through audio playback, with features like offline downloads, progress tracking, and automatic authentication. The system is designed to support learning on-the-go scenarios such as commuting or exercising.\n\n## Recent Changes (January 19, 2025)\n\n### Audio Upload and UI Improvements\n- **Fixed Audio Upload**: Resolved Google Cloud Storage authentication issue by switching to local file storage\n- **Removed Chapter Descriptions**: Simplified content management by removing unnecessary description fields from chapters\n- **Fixed Duration Input**: Corrected the duration input field to allow typing without \"0\" prefix issue\n- **Increased Font Sizes**: Made all text more readable by increasing base font size from 14px to 16px and scaling all text utilities\n\n## Previous Changes (January 18, 2025)\n\n### UI/UX Optimizations\n- **Improved Course Management Layout**: Enhanced the visual hierarchy and layout consistency across all content levels\n- **Action Icons Alignment**: Action buttons (add, edit, delete) are now properly aligned to the right and only visible on hover for cleaner interface\n- **Expand Arrow Positioning**: Fixed awkward placement of accordion expand arrows, now integrated properly with the trigger area\n- **Content Count Display**: Assignment and chapter counts now use proper singular/plural forms and are better positioned\n- **Nested Content Presentation**: Improved spacing and visual separation between courses, assignments, and chapters\n- **Hover Effects**: Added smooth transitions and hover states for better user interaction feedback\n\n### Unified Content Management System\n- Created a single, unified interface for managing all educational content regardless of source (API or manual upload)\n- Replaced separate content management components with UnifiedContentManager component\n- Administrators can now manage courses, assignments, and chapters in one hierarchical interface\n- Features include:\n  - **Full CRUD Operations**: Create, read, update, and delete for all content types\n  - **API Sync Integration**: Import content from The Institutes content repository\n  - **Manual Upload**: Direct audio file upload to Google Cloud Storage\n  - **Hierarchical View**: Nested accordion interface showing courses → assignments → chapters\n  - **Inline Actions**: Edit and delete buttons for each content item with hover visibility\n  - **Form Validation**: Comprehensive validation using react-hook-form and zod\n\n### Technical Implementation\n- **UnifiedContentManager Component**: Single component managing both API-sourced and manually uploaded content\n- **Backend Routes**: CRUD endpoints for courses, assignments, and chapters at `/api/admin/*`\n- **Storage Methods**: Added `getAllAssignments()` and `getAllChapters()` methods to DatabaseStorage\n- **File Upload**: Audio upload via multer middleware to Google Cloud Storage\n- **Object Storage**: Using default bucket for storing audio files with signed URLs\n- **Database Operations**: Full CRUD support in storage interface for all content types\n\n","size_bytes":3354},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          dark: \"var(--primary-dark)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      spacing: {\n        'xs': 'var(--spacing-xs)',\n        'sm': 'var(--spacing-sm)',\n        'default': 'var(--spacing-default)',\n        'md': 'var(--spacing-md)',\n        'lg': 'var(--spacing-lg)',\n        'xl': 'var(--spacing-xl)',\n      },\n      fontSize: {\n        'xs': 'var(--text-xs)',\n        'sm': 'var(--text-sm)',\n        'base': 'var(--text-base)',\n        'md': 'var(--text-md)',\n        'lg': 'var(--text-lg)',\n        'xl': 'var(--text-xl)',\n        '2xl': 'var(--text-2xl)',\n        '3xl': 'var(--text-3xl)',\n      },\n      transitionDuration: {\n        'colors': 'var(--transition-colors)',\n        'transform': 'var(--transition-transform)',\n      },\n      opacity: {\n        'disabled': 'var(--opacity-disabled)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        wave: {\n          \"0%, 100%\": { \n            transform: \"scaleY(1)\" \n          },\n          \"50%\": { \n            transform: \"scaleY(1.5)\" \n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n        \"bounce-slow\": {\n          \"0%, 100%\": {\n            transform: \"translateY(-25%)\",\n            animationTimingFunction: \"cubic-bezier(0.8, 0, 1, 1)\",\n          },\n          \"50%\": {\n            transform: \"translateY(0)\",\n            animationTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        wave: \"wave 1.5s ease-in-out infinite\",\n        \"pulse-slow\": \"pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"bounce-slow\": \"bounce-slow 3s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4455},"test-admin-sync.js":{"content":"// Test script to verify admin interface properly controls content\nconst baseUrl = 'http://localhost:5000';\n\nasync function testAdminSync() {\n  console.log('Testing Admin Content Sync...\\n');\n  \n  // Check chapters in admin interface\n  console.log('1. Checking chapters via admin endpoint:');\n  const adminResponse = await fetch(`${baseUrl}/api/admin/all-chapters`);\n  if (adminResponse.status === 401) {\n    console.log('   - Need authentication for admin endpoint');\n  } else {\n    const adminChapters = await adminResponse.json();\n    console.log(`   - Found ${adminChapters.length} chapters in admin interface`);\n    if (adminChapters.length > 0) {\n      adminChapters.forEach(ch => {\n        console.log(`     * ${ch.title} (ID: ${ch.id.substring(0, 8)}..., Audio: ${ch.audioUrl})`);\n      });\n    }\n  }\n  \n  // Check chapters in frontend\n  console.log('\\n2. Checking chapters via frontend endpoint:');\n  const assignmentId = '4f53a908-4427-44fa-a77e-156b5fc5b427';\n  const frontendResponse = await fetch(`${baseUrl}/api/assignments/${assignmentId}/chapters`);\n  if (frontendResponse.status === 401) {\n    console.log('   - Need authentication for frontend endpoint');\n  } else {\n    const frontendChapters = await frontendResponse.json();\n    console.log(`   - Found ${frontendChapters.length} chapters in frontend`);\n    if (frontendChapters.length > 0) {\n      frontendChapters.forEach(ch => {\n        console.log(`     * ${ch.title} (ID: ${ch.id.substring(0, 8)}..., Audio: ${ch.audioUrl})`);\n      });\n    }\n  }\n  \n  console.log('\\n3. Summary:');\n  console.log('   - Both admin and frontend should show the same chapters');\n  console.log('   - Deleting in admin should remove from both views');\n  console.log('   - The 2 chapters with \"uploading...\" status are placeholders that failed upload');\n}\n\ntestAdminSync().catch(console.error);","size_bytes":1846},"ui-changes-summary.md":{"content":"# UI Changes Summary\n\n## Completed Updates\n\n### 1. Header Height (80px)\n- Updated `AppHeader.tsx` to use `h-20` class (80px height)\n- Added `h-full flex items-center` to properly center content\n\n### 2. Font Styling  \n- Added Open Sans font import to `index.css`\n- Set course name to 18px with Open Sans font family\n- Applied via inline style: `fontFamily: '\"Open Sans\", sans-serif'`\n\n### 3. Course Code Display\n- Added `code` field to Course schema in database\n- Updated `AppHeader.tsx` to display format: \"CPCU 500: Becoming a Leader in Risk Management\"\n- Added fallback for courses without codes\n\n### 4. TI Logo\n- Created new SVG logo at `client/src/assets/ti-logo.svg`\n- Replaced Headphones icon with TI logo in header center\n- Logo displays as 40x40px white text \"TI\" on colored background\n\n### 5. Background Colors\n- Changed main background from white to grey (95% lightness)\n- Changed card backgrounds to pure white (100%)\n- Creates visual hierarchy with grey background and white content cards\n\n### 6. \"Module\" to \"Assignment\" Terminology\n- Updated all UI text references from \"Module\" to \"Assignment\"\n- Changed database content (3 assignments updated)\n- Updated component headings in `AssignmentList.tsx`\n- Updated seed data for future database resets\n\n## Files Modified\n\n1. **client/src/components/AppHeader.tsx**\n   - Height, font, logo, course code display\n\n2. **client/src/index.css**\n   - Open Sans font import\n   - Background and card color variables\n\n3. **client/src/components/AssignmentList.tsx**\n   - \"Module\" → \"Assignment\" text changes\n\n4. **shared/schema.ts**\n   - Added course `code` field\n\n5. **server/seedData.ts**\n   - Updated terminology and added course code\n\n6. **client/src/assets/ti-logo.svg** (new file)\n   - TI logo asset\n\n## Database Changes\n- Added `code` column to courses table\n- Updated existing course with code \"CPCU 500\"\n- Updated assignment titles from \"Module X\" to \"Assignment X\"","size_bytes":1924},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedTestData } from \"./seedData\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve uploaded audio files\napp.use('/uploads', express.static('public/uploads'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed test data in development mode\n  if (app.get(\"env\") === \"development\") {\n    await seedTestData();\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2308},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    // Find the right strategy based on hostname or use the first available\n    const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n    const strategyDomain = domains.includes(req.hostname) ? req.hostname : domains[0];\n    \n    passport.authenticate(`replitauth:${strategyDomain}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    // Find the right strategy based on hostname or use the first available\n    const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n    const strategyDomain = domains.includes(req.hostname) ? req.hostname : domains[0];\n    \n    passport.authenticate(`replitauth:${strategyDomain}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\n// Track ongoing refresh operations to prevent race conditions\nconst refreshPromises = new Map<string, Promise<any>>();\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user?.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  // Check if a refresh is already in progress for this user\n  const userId = user.id || user.claims?.sub;\n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  if (refreshPromises.has(userId)) {\n    try {\n      await refreshPromises.get(userId);\n      return next();\n    } catch (error) {\n      res.status(401).json({ message: \"Unauthorized\" });\n      return;\n    }\n  }\n\n  // Create new refresh promise\n  const refreshPromise = (async () => {\n    try {\n      const config = await getOidcConfig();\n      const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n      updateUserSession(user, tokenResponse);\n    } finally {\n      // Clean up the promise after completion\n      refreshPromises.delete(userId);\n    }\n  })();\n\n  refreshPromises.set(userId, refreshPromise);\n\n  try {\n    await refreshPromise;\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":5489},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { bubbleApiService } from \"./services/bubbleApi\";\nimport { audioService } from \"./services/audioService\";\nimport { objectStorageService } from \"./services/objectStorageService\";\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport multer from 'multer';\n\nconst execAsync = promisify(exec);\nimport * as path from \"path\";\nimport { \n  insertCourseSchema, \n  insertAssignmentSchema, \n  insertChapterSchema,\n  insertUserProgressSchema \n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: '/tmp/',\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept audio files only\n    const allowedMimes = ['audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/mp4', 'audio/ogg', 'audio/webm'];\n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only audio files are allowed.'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Health check endpoint (no auth required for testing)\n  app.get('/api/health', async (req, res) => {\n    const courses = await storage.getCourses();\n    res.json({ \n      status: 'ok', \n      coursesAvailable: courses.length,\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Course routes\n  app.get('/api/courses', isAuthenticated, async (req, res) => {\n    try {\n      const courses = await storage.getCourses();\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get('/api/courses/:id', isAuthenticated, async (req, res) => {\n    try {\n      const course = await storage.getCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error fetching course:\", error);\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  app.post('/api/courses', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData);\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error creating course:\", error);\n      res.status(500).json({ message: \"Failed to create course\" });\n    }\n  });\n\n  // Assignment routes\n  app.get('/api/courses/:courseId/assignments', isAuthenticated, async (req, res) => {\n    try {\n      const assignments = await storage.getAssignmentsByCourse(req.params.courseId);\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching assignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.get('/api/assignments/:id', isAuthenticated, async (req, res) => {\n    try {\n      const assignment = await storage.getAssignment(req.params.id);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n      res.json(assignment);\n    } catch (error) {\n      console.error(\"Error fetching assignment:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignment\" });\n    }\n  });\n\n  // Chapter routes\n  app.get('/api/assignments/:assignmentId/chapters', isAuthenticated, async (req, res) => {\n    try {\n      const chapters = await storage.getChaptersByAssignment(req.params.assignmentId);\n      console.log(\"API - Fetched chapters:\", chapters.map(ch => ({ id: ch.id, title: ch.title, audioUrl: ch.audioUrl })));\n      res.json(chapters);\n    } catch (error) {\n      console.error(\"Error fetching chapters:\", error);\n      res.status(500).json({ message: \"Failed to fetch chapters\" });\n    }\n  });\n\n  app.get('/api/chapters/:id', isAuthenticated, async (req, res) => {\n    try {\n      const chapter = await storage.getChapter(req.params.id);\n      if (!chapter) {\n        return res.status(404).json({ message: \"Chapter not found\" });\n      }\n      res.json(chapter);\n    } catch (error) {\n      console.error(\"Error fetching chapter:\", error);\n      res.status(500).json({ message: \"Failed to fetch chapter\" });\n    }\n  });\n\n  // User progress routes\n  app.get('/api/progress/:chapterId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const progress = await storage.getUserProgress(userId, req.params.chapterId);\n      res.json(progress || { currentTime: 0, isCompleted: false });\n    } catch (error) {\n      console.error(\"Error fetching progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  app.post('/api/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const progressData = insertUserProgressSchema.parse({\n        ...req.body,\n        userId,\n      });\n      const progress = await storage.updateUserProgress(progressData);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error updating progress:\", error);\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  // Audio download routes\n  app.post('/api/download/:chapterId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const chapterId = req.params.chapterId;\n      \n      const chapter = await storage.getChapter(chapterId);\n      if (!chapter) {\n        return res.status(404).json({ message: \"Chapter not found\" });\n      }\n\n      const localPath = await audioService.downloadAudio(chapter.audioUrl, chapterId);\n      const downloadedContent = await storage.addDownloadedContent(userId, chapterId, localPath);\n      \n      res.json(downloadedContent);\n    } catch (error) {\n      console.error(\"Error downloading audio:\", error);\n      res.status(500).json({ message: \"Failed to download audio\" });\n    }\n  });\n\n  app.get('/api/downloads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const downloads = await storage.getDownloadedContent(userId);\n      res.json(downloads);\n    } catch (error) {\n      console.error(\"Error fetching downloads:\", error);\n      res.status(500).json({ message: \"Failed to fetch downloads\" });\n    }\n  });\n\n  app.delete('/api/downloads/:chapterId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const chapterId = req.params.chapterId;\n      \n      await audioService.deleteDownloadedAudio(chapterId);\n      await storage.removeDownloadedContent(userId, chapterId);\n      \n      res.json({ message: \"Download removed\" });\n    } catch (error) {\n      console.error(\"Error removing download:\", error);\n      res.status(500).json({ message: \"Failed to remove download\" });\n    }\n  });\n\n  // Admin routes\n  \n  // Admin setup route - helps identify user for admin setup\n  app.get('/api/admin/setup-info', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json({ \n        userId,\n        email: user?.email,\n        isAdmin: user?.isAdmin,\n        setupCommand: `tsx server/scripts/setAdmin.ts ${userId}`\n      });\n    } catch (error) {\n      console.error(\"Error fetching setup info:\", error);\n      res.status(500).json({ message: \"Failed to fetch setup info\" });\n    }\n  });\n  \n  app.post('/api/admin/sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      await storage.createSyncLog('in_progress', 'Starting sync from content repo API');\n      \n      try {\n        await bubbleApiService.syncContent();\n        await storage.createSyncLog('success', 'Sync completed successfully');\n        res.json({ message: \"Sync completed successfully\" });\n      } catch (syncError) {\n        await storage.createSyncLog('error', `Sync failed: ${syncError}`);\n        throw syncError;\n      }\n    } catch (error) {\n      console.error(\"Error syncing content:\", error);\n      res.status(500).json({ message: \"Failed to sync content\" });\n    }\n  });\n\n  app.get('/api/admin/sync-status', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const latestLog = await storage.getLatestSyncLog();\n      res.json(latestLog);\n    } catch (error) {\n      console.error(\"Error fetching sync status:\", error);\n      res.status(500).json({ message: \"Failed to fetch sync status\" });\n    }\n  });\n\n  // Manual content management endpoints\n  app.post('/api/admin/courses', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const courseData = insertCourseSchema.parse(req.body);\n      const newCourse = await storage.createCourse(courseData);\n      res.json(newCourse);\n    } catch (error) {\n      console.error(\"Error creating course:\", error);\n      res.status(500).json({ message: \"Failed to create course\" });\n    }\n  });\n\n  app.put('/api/admin/courses/:courseId', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const courseId = req.params.courseId;\n      const courseData = insertCourseSchema.partial().parse(req.body);\n      const updatedCourse = await storage.updateCourse(courseId, courseData);\n      res.json(updatedCourse);\n    } catch (error) {\n      console.error(\"Error updating course:\", error);\n      res.status(500).json({ message: \"Failed to update course\" });\n    }\n  });\n\n  app.delete('/api/admin/courses/:courseId', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const courseId = req.params.courseId;\n      await storage.deleteCourse(courseId);\n      res.json({ message: \"Course deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting course:\", error);\n      res.status(500).json({ message: \"Failed to delete course\" });\n    }\n  });\n\n  app.post('/api/admin/assignments', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const assignmentData = insertAssignmentSchema.parse(req.body);\n      const newAssignment = await storage.createAssignment(assignmentData);\n      res.json(newAssignment);\n    } catch (error) {\n      console.error(\"Error creating assignment:\", error);\n      res.status(500).json({ message: \"Failed to create assignment\" });\n    }\n  });\n\n  app.put('/api/admin/assignments/:assignmentId', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const assignmentId = req.params.assignmentId;\n      const assignmentData = insertAssignmentSchema.partial().parse(req.body);\n      const updatedAssignment = await storage.updateAssignment(assignmentId, assignmentData);\n      res.json(updatedAssignment);\n    } catch (error) {\n      console.error(\"Error updating assignment:\", error);\n      res.status(500).json({ message: \"Failed to update assignment\" });\n    }\n  });\n\n  app.delete('/api/admin/assignments/:assignmentId', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const assignmentId = req.params.assignmentId;\n      await storage.deleteAssignment(assignmentId);\n      res.json({ message: \"Assignment deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting assignment:\", error);\n      res.status(500).json({ message: \"Failed to delete assignment\" });\n    }\n  });\n\n  app.post('/api/admin/chapters', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const chapterData = insertChapterSchema.parse(req.body);\n      const newChapter = await storage.createChapter(chapterData);\n      res.json(newChapter);\n    } catch (error) {\n      console.error(\"Error creating chapter:\", error);\n      res.status(500).json({ message: \"Failed to create chapter\" });\n    }\n  });\n\n  app.put('/api/admin/chapters/:chapterId', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const chapterId = req.params.chapterId;\n      const chapterData = insertChapterSchema.partial().parse(req.body);\n      const updatedChapter = await storage.updateChapter(chapterId, chapterData);\n      res.json(updatedChapter);\n    } catch (error) {\n      console.error(\"Error updating chapter:\", error);\n      res.status(500).json({ message: \"Failed to update chapter\" });\n    }\n  });\n\n  app.delete('/api/admin/chapters/:chapterId', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const chapterId = req.params.chapterId;\n      await storage.deleteChapter(chapterId);\n      res.json({ message: \"Chapter deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting chapter:\", error);\n      res.status(500).json({ message: \"Failed to delete chapter\" });\n    }\n  });\n\n  // Upload audio file temporarily (without chapter association)\n  app.post('/api/admin/upload-temp-audio', isAuthenticated, upload.single('audio'), async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"No audio file provided\" });\n      }\n\n      // Upload the file to object storage with a temporary name\n      const fileName = `temp-${Date.now()}-${req.file.originalname}`;\n      const audioUrl = await objectStorageService.uploadAudioFile(req.file, fileName);\n\n      res.json({ \n        message: \"Audio file uploaded successfully\",\n        audioUrl\n      });\n    } catch (error) {\n      console.error(\"Error uploading temporary audio file:\", error);\n      // Clean up the uploaded file on error\n      if (req.file && fs.existsSync(req.file.path)) {\n        await fs.promises.unlink(req.file.path);\n      }\n      res.status(500).json({ message: \"Failed to upload audio file\" });\n    }\n  });\n\n  // Upload audio file for a specific chapter\n  app.post('/api/admin/upload-audio', isAuthenticated, upload.single('audio'), async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"No audio file provided\" });\n      }\n\n      const { chapterId } = req.body;\n      if (!chapterId) {\n        // Clean up the uploaded file\n        if (fs.existsSync(req.file.path)) {\n          await fs.promises.unlink(req.file.path);\n        }\n        return res.status(400).json({ message: \"Chapter ID is required\" });\n      }\n\n      // Get the chapter to update\n      const chapter = await storage.getChapter(chapterId);\n      if (!chapter) {\n        // Clean up the uploaded file\n        if (fs.existsSync(req.file.path)) {\n          await fs.promises.unlink(req.file.path);\n        }\n        return res.status(404).json({ message: \"Chapter not found\" });\n      }\n\n      // Upload the file to object storage\n      const fileName = `${chapterId}-${Date.now()}.mp3`;\n      const audioUrl = await objectStorageService.uploadAudioFile(req.file, fileName);\n\n      // Update the chapter with the new audio URL\n      const updatedChapter = await storage.updateChapter(chapterId, {\n        audioUrl,\n      });\n\n      res.json({ \n        message: \"Audio file uploaded successfully\",\n        audioUrl,\n        chapter: updatedChapter\n      });\n    } catch (error) {\n      console.error(\"Error uploading audio file:\", error);\n      // Clean up the uploaded file on error\n      if (req.file && fs.existsSync(req.file.path)) {\n        await fs.promises.unlink(req.file.path);\n      }\n      res.status(500).json({ message: \"Failed to upload audio file\" });\n    }\n  });\n\n  // Get all assignments across all courses for admin dropdown\n  app.get('/api/admin/all-assignments', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const courses = await storage.getCourses();\n      const assignmentsWithCourse = [];\n      \n      for (const course of courses) {\n        const assignments = await storage.getAssignmentsByCourse(course.id);\n        for (const assignment of assignments) {\n          assignmentsWithCourse.push({\n            ...assignment,\n            courseName: course.name,\n            courseCode: course.code,\n          });\n        }\n      }\n\n      res.json(assignmentsWithCourse);\n    } catch (error) {\n      console.error(\"Error fetching all assignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  // Get all chapters across all assignments for admin interface\n  app.get('/api/admin/all-chapters', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const courses = await storage.getCourses();\n      const allChapters = [];\n      \n      for (const course of courses) {\n        const assignments = await storage.getAssignmentsByCourse(course.id);\n        for (const assignment of assignments) {\n          const chapters = await storage.getChaptersByAssignment(assignment.id);\n          for (const chapter of chapters) {\n            allChapters.push({\n              ...chapter,\n              assignmentId: assignment.id,\n              assignmentTitle: assignment.title,\n              courseId: course.id,\n              courseName: course.name,\n            });\n          }\n        }\n      }\n\n      res.json(allChapters);\n    } catch (error) {\n      console.error(\"Error fetching all chapters:\", error);\n      res.status(500).json({ message: \"Failed to fetch chapters\" });\n    }\n  });\n\n  // Upload course audio endpoint - uploads audio for all chapters in a course\n  app.post('/api/admin/courses/:courseId/upload-audio', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const courseId = req.params.courseId;\n      const { baseAudioUrl } = req.body;\n\n      // Get all assignments and chapters for this course\n      const assignments = await storage.getAssignmentsByCourse(courseId);\n      let updatedCount = 0;\n\n      for (const assignment of assignments) {\n        const chapters = await storage.getChaptersByAssignment(assignment.id);\n        \n        for (const chapter of chapters) {\n          // Generate audio URL for each chapter based on course and chapter ID\n          const audioUrl = baseAudioUrl ? \n            `${baseAudioUrl}/${courseId}/${chapter.id}.mp3` : \n            `https://content.theinstitutes.org/audio/courses/${courseId}/chapters/${chapter.id}.mp3`;\n          \n          await storage.updateChapter(chapter.id, {\n            audioUrl,\n            duration: Math.floor(Math.random() * 600) + 60 // Placeholder duration, will be updated when actual audio is loaded\n          });\n          updatedCount++;\n        }\n      }\n\n      res.json({ \n        message: `Successfully uploaded audio for ${updatedCount} chapters in course`,\n        updatedCount \n      });\n    } catch (error) {\n      console.error(\"Error uploading course audio:\", error);\n      res.status(500).json({ message: \"Failed to upload course audio\" });\n    }\n  });\n\n  // Test page for audio ended event\n  app.get('/test-audio-ended', (req, res) => {\n    res.sendFile(path.join(process.cwd(), 'test-audio-ended.html'));\n  });\n\n  // Audio endpoint - serves actual MP3 files or generates mock audio for testing\n  // This must be before the catch-all route so it's handled properly\n  app.get('/api/audio/:chapterId.mp3', async (req, res) => {\n    try {\n      const chapterId = req.params.chapterId.replace('.mp3', '');\n      \n      // Check if we have an actual audio file for this chapter\n      // First try with the chapter ID as filename\n      const possiblePaths: string[] = [\n        path.join(process.cwd(), 'server', 'audio-files', `${chapterId}.mp3`)\n      ];\n      \n      // Special case for chapter-4-business-insurance\n      if (chapterId === 'chapter-4-business-insurance') {\n        possiblePaths.push(path.join(process.cwd(), 'server', 'audio-files', 'chapter-4.mp3'));\n      }\n      \n      for (const audioPath of possiblePaths) {\n        try {\n          await fs.promises.access(audioPath);\n          \n          // Get file stats for content-length\n          const stats = await fs.promises.stat(audioPath);\n          \n          // Set proper headers for audio streaming\n          res.setHeader('Content-Type', 'audio/mpeg');\n          res.setHeader('Content-Length', stats.size.toString());\n          res.setHeader('Accept-Ranges', 'bytes');\n          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n          res.setHeader('Pragma', 'no-cache');\n          res.setHeader('Expires', '0');\n          res.setHeader('Access-Control-Allow-Origin', '*');\n          \n          // Stream the file\n          const stream = fs.createReadStream(audioPath);\n          stream.pipe(res);\n          \n          console.log(`Serving actual MP3 file for chapter: ${chapterId} from ${audioPath}`);\n          return;\n        } catch (err) {\n          // File doesn't exist, try next path\n          console.log(`File not found at: ${audioPath}`);\n          continue;\n        }\n      }\n      \n      console.log(`Audio file not found for ${chapterId}, generating mock audio`);\n      \n      console.log(`Generating MP3 audio for chapter: ${chapterId}`);\n      \n      // Use chapter ID to create unique speech patterns\n      const hash = chapterId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n      const baseFreq = 200 + (hash % 200); // Base frequency 200-400 Hz\n      const variation = hash % 100;\n      \n      // Create temp files\n      const tempDir = os.tmpdir();\n      const tempMp3 = path.join(tempDir, `audio_${chapterId}_${Date.now()}.mp3`);\n      \n      // Generate speech-like audio using ffmpeg's built-in synthesis\n      // Create multiple tones with speech-like patterns\n      const duration = 30; // 30 seconds\n      const sampleRate = 44100;\n      \n      // Build ffmpeg command to generate speech-like audio\n      // Use sine waves with envelopes to simulate speech\n      const ffmpegCommand = `ffmpeg -f lavfi -i \"` +\n        `sine=frequency=${baseFreq}:duration=0.3,` +\n        `apad=pad_dur=0.1[s1];` +\n        `sine=frequency=${baseFreq * 1.5}:duration=0.2,` +\n        `apad=pad_dur=0.15[s2];` +\n        `sine=frequency=${baseFreq * 2}:duration=0.25,` +\n        `apad=pad_dur=0.1[s3];` +\n        `sine=frequency=${baseFreq * 0.8}:duration=0.35,` +\n        `apad=pad_dur=0.05[s4];` +\n        `[s1][s2][s3][s4]concat=n=4:v=0:a=1[mix];` +\n        `[mix]aloop=loop=25:size=${sampleRate}[loop];` +\n        `[loop]atrim=duration=${duration},` +\n        `volume=0.5,` +\n        `tremolo=f=4:d=0.3,` +\n        `aformat=sample_rates=44100:channel_layouts=mono\" ` +\n        `-t ${duration} ` +\n        `-b:a 128k ` +\n        `-ar 44100 ` +\n        `-ac 1 ` +\n        `-y ${tempMp3}`;\n      \n      // Execute ffmpeg command\n      await execAsync(ffmpegCommand);\n      \n      // Read the generated MP3 file\n      const mp3Buffer = await fs.promises.readFile(tempMp3);\n      \n      // Clean up temp file\n      await fs.promises.unlink(tempMp3).catch(() => {}); // Ignore errors\n      \n      console.log(`Generated valid MP3 file of ${mp3Buffer.length} bytes for chapter ${chapterId}`);\n      \n      // Set proper headers for audio streaming\n      res.setHeader('Content-Type', 'audio/mpeg');\n      res.setHeader('Content-Length', mp3Buffer.length.toString());\n      res.setHeader('Accept-Ranges', 'bytes');\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.setHeader('Pragma', 'no-cache');\n      res.setHeader('Expires', '0');\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      \n      // Send the MP3 file\n      res.send(mp3Buffer);\n    } catch (error) {\n      console.error(\"Error generating audio:\", error);\n      res.status(500).json({ message: \"Failed to generate audio\" });\n    }\n  });\n  \n  // Redirect .wav requests to .mp3 for backwards compatibility during migration\n  app.get('/api/audio/:chapterId.wav', (req, res) => {\n    const chapterId = req.params.chapterId;\n    res.redirect(`/api/audio/${chapterId}.mp3`);\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27179},"server/seedData.ts":{"content":"import { db } from \"./db\";\nimport { courses, assignments, chapters } from \"@shared/schema\";\n\nexport async function seedTestData() {\n  try {\n    console.log(\"Seeding test data...\");\n    \n    // Check if data already exists\n    const existingCourses = await db.select().from(courses);\n    if (existingCourses.length > 0) {\n      console.log(\"Data already exists, skipping seed\");\n      return;\n    }\n\n    // Create a test course\n    const [testCourse] = await db.insert(courses).values({\n      code: \"CPCU 500\",\n      name: \"Becoming a Leader in Risk Management\",\n      description: \"Learn the fundamentals of risk management in the insurance industry\",\n      isActive: true,\n    }).returning();\n\n    console.log(\"Created course:\", testCourse.name);\n\n    // Create assignments for the course\n    const assignmentData = [\n      {\n        courseId: testCourse.id,\n        title: \"Assignment 1: Introduction to Risk\",\n        description: \"Understanding basic risk concepts and terminology\",\n        orderIndex: 1,\n      },\n      {\n        courseId: testCourse.id,\n        title: \"Assignment 2: Risk Assessment\",\n        description: \"Methods and tools for assessing different types of risks\",\n        orderIndex: 2,\n      },\n      {\n        courseId: testCourse.id,\n        title: \"Assignment 3: Risk Mitigation\",\n        description: \"Strategies for reducing and managing identified risks\",\n        orderIndex: 3,\n      },\n    ];\n\n    const insertedAssignments = await db.insert(assignments).values(assignmentData).returning();\n    console.log(`Created ${insertedAssignments.length} assignments`);\n\n    // Create chapters for each assignment\n    const chapterData = [];\n    \n    // Assignment 1 chapters\n    chapterData.push(\n      {\n        assignmentId: insertedAssignments[0].id,\n        title: \"Chapter 1.1: What is Risk?\",\n        description: \"Defining risk in the context of insurance\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\",\n        duration: 369,\n        orderIndex: 1,\n      },\n      {\n        assignmentId: insertedAssignments[0].id,\n        title: \"Chapter 1.2: Types of Risk\",\n        description: \"Exploring different categories of risk\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3\",\n        duration: 429,\n        orderIndex: 2,\n      },\n      {\n        assignmentId: insertedAssignments[0].id,\n        title: \"Chapter 1.3: Risk Management Framework\",\n        description: \"Overview of the risk management process\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3\",\n        duration: 353,\n        orderIndex: 3,\n      }\n    );\n\n    // Assignment 2 chapters\n    chapterData.push(\n      {\n        assignmentId: insertedAssignments[1].id,\n        title: \"Chapter 2.1: Risk Identification\",\n        description: \"Techniques for identifying potential risks\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3\",\n        duration: 468,\n        orderIndex: 1,\n      },\n      {\n        assignmentId: insertedAssignments[1].id,\n        title: \"Chapter 2.2: Risk Analysis\",\n        description: \"Analyzing probability and impact of risks\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-5.mp3\",\n        duration: 399,\n        orderIndex: 2,\n      },\n      {\n        assignmentId: insertedAssignments[1].id,\n        title: \"Chapter 2.3: Risk Evaluation\",\n        description: \"Prioritizing risks for treatment\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-6.mp3\",\n        duration: 382,\n        orderIndex: 3,\n      }\n    );\n\n    // Assignment 3 chapters\n    chapterData.push(\n      {\n        assignmentId: insertedAssignments[2].id,\n        title: \"Chapter 3.1: Risk Control Strategies\",\n        description: \"Methods for controlling and reducing risks\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-7.mp3\",\n        duration: 423,\n        orderIndex: 1,\n      },\n      {\n        assignmentId: insertedAssignments[2].id,\n        title: \"Chapter 3.2: Risk Financing\",\n        description: \"Financial strategies for managing risk\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-8.mp3\",\n        duration: 411,\n        orderIndex: 2,\n      },\n      {\n        assignmentId: insertedAssignments[2].id,\n        title: \"Chapter 3.3: Monitoring and Review\",\n        description: \"Continuous improvement in risk management\",\n        audioUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-9.mp3\",\n        duration: 397,\n        orderIndex: 3,\n      }\n    );\n\n    const insertedChapters = await db.insert(chapters).values(chapterData).returning();\n    console.log(`Created ${insertedChapters.length} chapters`);\n\n    console.log(\"Test data seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding test data:\", error);\n  }\n}","size_bytes":4907},"server/storage.ts":{"content":"import {\n  users,\n  courses,\n  assignments,\n  chapters,\n  userProgress,\n  downloadedContent,\n  syncLogs,\n  type User,\n  type UpsertUser,\n  type Course,\n  type Assignment,\n  type Chapter,\n  type UserProgress,\n  type DownloadedContent,\n  type SyncLog,\n  type InsertCourse,\n  type InsertAssignment,\n  type InsertChapter,\n  type InsertUserProgress,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Course operations\n  getCourses(): Promise<Course[]>;\n  getCourse(id: string): Promise<Course | undefined>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: string, course: Partial<InsertCourse>): Promise<Course>;\n  deleteCourse(id: string): Promise<void>;\n  \n  // Assignment operations\n  getAssignmentsByCourse(courseId: string): Promise<Assignment[]>;\n  getAssignment(id: string): Promise<Assignment | undefined>;\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  updateAssignment(id: string, assignment: Partial<InsertAssignment>): Promise<Assignment>;\n  deleteAssignment(id: string): Promise<void>;\n  \n  // Chapter operations\n  getChaptersByAssignment(assignmentId: string): Promise<Chapter[]>;\n  getChapter(id: string): Promise<Chapter | undefined>;\n  createChapter(chapter: InsertChapter): Promise<Chapter>;\n  updateChapter(id: string, chapter: Partial<InsertChapter>): Promise<Chapter>;\n  deleteChapter(id: string): Promise<void>;\n  \n  // User progress operations\n  getUserProgress(userId: string, chapterId: string): Promise<UserProgress | undefined>;\n  updateUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  getUserProgressByChapter(userId: string, chapterId: string): Promise<UserProgress | undefined>;\n  \n  // Downloaded content operations\n  getDownloadedContent(userId: string): Promise<DownloadedContent[]>;\n  addDownloadedContent(userId: string, chapterId: string, localPath: string): Promise<DownloadedContent>;\n  removeDownloadedContent(userId: string, chapterId: string): Promise<void>;\n  \n  // Sync log operations\n  createSyncLog(status: string, message?: string): Promise<SyncLog>;\n  getLatestSyncLog(): Promise<SyncLog | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Course operations\n  async getCourses(): Promise<Course[]> {\n    return await db.select().from(courses).where(eq(courses.isActive, true)).orderBy(asc(courses.name));\n  }\n\n  async getCourse(id: string): Promise<Course | undefined> {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id));\n    return course;\n  }\n\n  async createCourse(course: InsertCourse): Promise<Course> {\n    const [newCourse] = await db.insert(courses).values(course).returning();\n    return newCourse;\n  }\n\n  async updateCourse(id: string, course: Partial<InsertCourse>): Promise<Course> {\n    const [updatedCourse] = await db\n      .update(courses)\n      .set({ ...course, updatedAt: new Date() })\n      .where(eq(courses.id, id))\n      .returning();\n    return updatedCourse;\n  }\n\n  async deleteCourse(id: string): Promise<void> {\n    await db.update(courses).set({ isActive: false }).where(eq(courses.id, id));\n  }\n\n  // Assignment operations\n  async getAssignmentsByCourse(courseId: string): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .where(eq(assignments.courseId, courseId))\n      .orderBy(asc(assignments.orderIndex));\n  }\n\n  async getAssignment(id: string): Promise<Assignment | undefined> {\n    const [assignment] = await db.select().from(assignments).where(eq(assignments.id, id));\n    return assignment;\n  }\n\n  async createAssignment(assignment: InsertAssignment): Promise<Assignment> {\n    const [newAssignment] = await db.insert(assignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async updateAssignment(id: string, assignment: Partial<InsertAssignment>): Promise<Assignment> {\n    const [updatedAssignment] = await db\n      .update(assignments)\n      .set({ ...assignment, updatedAt: new Date() })\n      .where(eq(assignments.id, id))\n      .returning();\n    return updatedAssignment;\n  }\n\n  async deleteAssignment(id: string): Promise<void> {\n    await db.delete(assignments).where(eq(assignments.id, id));\n  }\n\n  async getAllAssignments(): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .orderBy(asc(assignments.orderIndex));\n  }\n\n  // Chapter operations\n  async getChaptersByAssignment(assignmentId: string): Promise<Chapter[]> {\n    return await db\n      .select()\n      .from(chapters)\n      .where(eq(chapters.assignmentId, assignmentId))\n      .orderBy(asc(chapters.orderIndex));\n  }\n\n  async getChapter(id: string): Promise<Chapter | undefined> {\n    const [chapter] = await db.select().from(chapters).where(eq(chapters.id, id));\n    return chapter;\n  }\n\n  async createChapter(chapter: InsertChapter): Promise<Chapter> {\n    const [newChapter] = await db.insert(chapters).values(chapter).returning();\n    return newChapter;\n  }\n\n  async updateChapter(id: string, chapter: Partial<InsertChapter>): Promise<Chapter> {\n    const [updatedChapter] = await db\n      .update(chapters)\n      .set({ ...chapter, updatedAt: new Date() })\n      .where(eq(chapters.id, id))\n      .returning();\n    return updatedChapter;\n  }\n\n  async deleteChapter(id: string): Promise<void> {\n    await db.delete(chapters).where(eq(chapters.id, id));\n  }\n\n  async getAllChapters(): Promise<Chapter[]> {\n    return await db\n      .select()\n      .from(chapters)\n      .orderBy(asc(chapters.orderIndex));\n  }\n\n  // User progress operations\n  async getUserProgress(userId: string, chapterId: string): Promise<UserProgress | undefined> {\n    const [progress] = await db\n      .select()\n      .from(userProgress)\n      .where(and(eq(userProgress.userId, userId), eq(userProgress.chapterId, chapterId)));\n    return progress;\n  }\n\n  async updateUserProgress(progress: InsertUserProgress): Promise<UserProgress> {\n    const existing = await this.getUserProgress(progress.userId, progress.chapterId);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(userProgress)\n        .set({ ...progress, updatedAt: new Date() })\n        .where(and(eq(userProgress.userId, progress.userId), eq(userProgress.chapterId, progress.chapterId)))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(userProgress).values(progress).returning();\n      return created;\n    }\n  }\n\n  async getUserProgressByChapter(userId: string, chapterId: string): Promise<UserProgress | undefined> {\n    return this.getUserProgress(userId, chapterId);\n  }\n\n  // Downloaded content operations\n  async getDownloadedContent(userId: string): Promise<DownloadedContent[]> {\n    return await db\n      .select()\n      .from(downloadedContent)\n      .where(eq(downloadedContent.userId, userId))\n      .orderBy(desc(downloadedContent.downloadedAt));\n  }\n\n  async addDownloadedContent(userId: string, chapterId: string, localPath: string): Promise<DownloadedContent> {\n    const [content] = await db\n      .insert(downloadedContent)\n      .values({ userId, chapterId, localPath })\n      .returning();\n    return content;\n  }\n\n  async removeDownloadedContent(userId: string, chapterId: string): Promise<void> {\n    await db\n      .delete(downloadedContent)\n      .where(and(eq(downloadedContent.userId, userId), eq(downloadedContent.chapterId, chapterId)));\n  }\n\n  // Sync log operations\n  async createSyncLog(status: string, message?: string): Promise<SyncLog> {\n    const [log] = await db\n      .insert(syncLogs)\n      .values({ status, message })\n      .returning();\n    return log;\n  }\n\n  async getLatestSyncLog(): Promise<SyncLog | undefined> {\n    const [log] = await db\n      .select()\n      .from(syncLogs)\n      .orderBy(desc(syncLogs.syncedAt))\n      .limit(1);\n    return log;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8561},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  real,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Course table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\"),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  bubbleId: varchar(\"bubble_id\").unique(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Assignment table\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").notNull().references(() => courses.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  orderIndex: integer(\"order_index\").notNull(),\n  bubbleId: varchar(\"bubble_id\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chapter table\nexport const chapters = pgTable(\"chapters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assignmentId: varchar(\"assignment_id\").notNull().references(() => assignments.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\").notNull(),\n  audioUrl: varchar(\"audio_url\").notNull(),\n  duration: integer(\"duration\"), // in seconds\n  orderIndex: integer(\"order_index\").notNull(),\n  bubbleId: varchar(\"bubble_id\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User progress table\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id, { onDelete: \"cascade\" }),\n  currentTime: real(\"current_time\").default(0), // in seconds\n  isCompleted: boolean(\"is_completed\").default(false),\n  lastAccessedAt: timestamp(\"last_accessed_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Downloaded content table for offline access\nexport const downloadedContent = pgTable(\"downloaded_content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id, { onDelete: \"cascade\" }),\n  localPath: varchar(\"local_path\").notNull(),\n  downloadedAt: timestamp(\"downloaded_at\").defaultNow(),\n});\n\n// Sync log table\nexport const syncLogs = pgTable(\"sync_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  status: varchar(\"status\").notNull(), // 'success', 'error', 'in_progress'\n  message: text(\"message\"),\n  syncedAt: timestamp(\"synced_at\").defaultNow(),\n});\n\n// Relations\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  assignments: many(assignments),\n}));\n\nexport const assignmentsRelations = relations(assignments, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [assignments.courseId],\n    references: [courses.id],\n  }),\n  chapters: many(chapters),\n}));\n\nexport const chaptersRelations = relations(chapters, ({ one, many }) => ({\n  assignment: one(assignments, {\n    fields: [chapters.assignmentId],\n    references: [assignments.id],\n  }),\n  userProgress: many(userProgress),\n  downloadedContent: many(downloadedContent),\n}));\n\nexport const userProgressRelations = relations(userProgress, ({ one }) => ({\n  user: one(users, {\n    fields: [userProgress.userId],\n    references: [users.id],\n  }),\n  chapter: one(chapters, {\n    fields: [userProgress.chapterId],\n    references: [chapters.id],\n  }),\n}));\n\nexport const downloadedContentRelations = relations(downloadedContent, ({ one }) => ({\n  user: one(users, {\n    fields: [downloadedContent.userId],\n    references: [users.id],\n  }),\n  chapter: one(chapters, {\n    fields: [downloadedContent.chapterId],\n    references: [chapters.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChapterSchema = createInsertSchema(chapters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Assignment = typeof assignments.$inferSelect;\nexport type Chapter = typeof chapters.$inferSelect;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type DownloadedContent = typeof downloadedContent.$inferSelect;\nexport type SyncLog = typeof syncLogs.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\nexport type InsertChapter = z.infer<typeof insertChapterSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\n","size_bytes":6356},"client/public/sw.js":{"content":"const CACHE_NAME = 'audio-learning-v4'; // Force cache refresh for new MP3 files\nconst OFFLINE_URL = '/offline.html';\n\n// Files to cache for offline functionality\nconst STATIC_CACHE_FILES = [\n  '/',\n  '/offline.html',\n  '/favicon.ico',\n  // Add other static assets as needed\n];\n\n// Install event - cache static files\nself.addEventListener('install', (event) => {\n  console.log('Service Worker installing...');\n  \n  event.waitUntil(\n    caches.open(CACHE_NAME).then((cache) => {\n      console.log('Caching static files');\n      return cache.addAll(STATIC_CACHE_FILES);\n    })\n  );\n  \n  // Activate immediately\n  self.skipWaiting();\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker activating...');\n  \n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  \n  // Take control of all pages\n  self.clients.claim();\n});\n\n// Fetch event - serve cached content when offline\nself.addEventListener('fetch', (event) => {\n  // Skip cross-origin requests and non-GET requests\n  if (!event.request.url.startsWith(self.location.origin) || event.request.method !== 'GET') {\n    return;\n  }\n\n  // Handle navigation requests\n  if (event.request.mode === 'navigate') {\n    event.respondWith(\n      fetch(event.request).catch(() => {\n        return caches.match(OFFLINE_URL);\n      })\n    );\n    return;\n  }\n\n  // Handle API requests\n  if (event.request.url.includes('/api/')) {\n    event.respondWith(\n      fetch(event.request).catch((error) => {\n        console.log('API request failed, serving from cache if available:', error);\n        return caches.match(event.request).then((cachedResponse) => {\n          if (cachedResponse) {\n            return cachedResponse;\n          }\n          // Return a generic offline response for API requests\n          return new Response(\n            JSON.stringify({ \n              error: 'Offline', \n              message: 'This feature requires an internet connection' \n            }),\n            { \n              status: 503, \n              statusText: 'Service Unavailable',\n              headers: { 'Content-Type': 'application/json' }\n            }\n          );\n        });\n      })\n    );\n    return;\n  }\n\n  // Handle audio file requests with network-first strategy\n  if (event.request.url.includes('audio') || \n      event.request.headers.get('accept')?.includes('audio')) {\n    event.respondWith(\n      fetch(event.request).then((response) => {\n        // If network succeeds, cache the new version and return it\n        if (response.ok && response.headers.get('content-type')?.includes('audio')) {\n          const responseClone = response.clone();\n          caches.open(CACHE_NAME).then((cache) => {\n            console.log('Caching updated audio file');\n            cache.put(event.request, responseClone);\n          });\n        }\n        return response;\n      }).catch(() => {\n        // If network fails, try to serve from cache\n        console.log('Network failed, serving audio from cache if available');\n        return caches.match(event.request).then((cachedResponse) => {\n          if (cachedResponse) {\n            console.log('Serving audio from cache (offline)');\n            return cachedResponse;\n          }\n          // Return error if not in cache\n          return new Response('Audio file not available offline', {\n            status: 503,\n            statusText: 'Service Unavailable'\n          });\n        });\n      })\n    );\n    return;\n  }\n\n  // Handle other requests with network-first strategy\n  event.respondWith(\n    fetch(event.request).then((response) => {\n      // Cache successful responses\n      if (response.ok) {\n        const responseClone = response.clone();\n        caches.open(CACHE_NAME).then((cache) => {\n          cache.put(event.request, responseClone);\n        });\n      }\n      return response;\n    }).catch(() => {\n      // Serve from cache if network fails\n      return caches.match(event.request).then((cachedResponse) => {\n        return cachedResponse || caches.match(OFFLINE_URL);\n      });\n    })\n  );\n});\n\n// Background sync for progress updates\nself.addEventListener('sync', (event) => {\n  console.log('Background sync triggered:', event.tag);\n  \n  if (event.tag === 'progress-sync') {\n    event.waitUntil(syncProgress());\n  }\n  \n  if (event.tag === 'download-sync') {\n    event.waitUntil(syncDownloads());\n  }\n});\n\n// Sync progress data when back online\nasync function syncProgress() {\n  try {\n    // Get pending progress updates from IndexedDB\n    // This would integrate with your offline storage system\n    console.log('Syncing progress data...');\n    \n    // Implementation would depend on how you store offline progress\n    // For now, this is a placeholder\n    \n  } catch (error) {\n    console.error('Failed to sync progress:', error);\n  }\n}\n\n// Sync download status when back online\nasync function syncDownloads() {\n  try {\n    console.log('Syncing download data...');\n    \n    // Implementation would sync download status with server\n    \n  } catch (error) {\n    console.error('Failed to sync downloads:', error);\n  }\n}\n\n// Handle push notifications (for future use)\nself.addEventListener('push', (event) => {\n  if (event.data) {\n    const data = event.data.json();\n    console.log('Push notification received:', data);\n    \n    const options = {\n      body: data.body,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      data: data,\n      actions: [\n        {\n          action: 'open',\n          title: 'Open App'\n        },\n        {\n          action: 'close',\n          title: 'Close'\n        }\n      ]\n    };\n\n    event.waitUntil(\n      self.registration.showNotification(data.title, options)\n    );\n  }\n});\n\n// Handle notification clicks\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n\n  if (event.action === 'open' || !event.action) {\n    event.waitUntil(\n      clients.matchAll({ type: 'window' }).then((clientList) => {\n        // If app is already open, focus it\n        for (const client of clientList) {\n          if (client.url.includes(self.location.origin) && 'focus' in client) {\n            return client.focus();\n          }\n        }\n        \n        // Otherwise, open a new window\n        if (clients.openWindow) {\n          return clients.openWindow('/');\n        }\n      })\n    );\n  }\n});\n\n// Handle messages from the main thread\nself.addEventListener('message', (event) => {\n  console.log('Service Worker received message:', event.data);\n  \n  if (event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n  \n  if (event.data.type === 'CACHE_AUDIO') {\n    const { url, chapterId } = event.data;\n    cacheAudioFile(url, chapterId);\n  }\n});\n\n// Cache audio file for offline playback\nasync function cacheAudioFile(url, chapterId) {\n  try {\n    const cache = await caches.open(CACHE_NAME);\n    const response = await fetch(url);\n    \n    if (response.ok) {\n      await cache.put(`audio_${chapterId}`, response);\n      console.log(`Cached audio file for chapter: ${chapterId}`);\n      \n      // Notify the main thread that caching is complete\n      self.clients.matchAll().then((clients) => {\n        clients.forEach((client) => {\n          client.postMessage({\n            type: 'AUDIO_CACHED',\n            chapterId: chapterId,\n            success: true\n          });\n        });\n      });\n    }\n  } catch (error) {\n    console.error('Failed to cache audio file:', error);\n    \n    // Notify the main thread that caching failed\n    self.clients.matchAll().then((clients) => {\n      clients.forEach((client) => {\n        client.postMessage({\n          type: 'AUDIO_CACHED',\n          chapterId: chapterId,\n          success: false,\n          error: error.message\n        });\n      });\n    });\n  }\n}\n","size_bytes":8002},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { AudioProvider } from \"@/contexts/AudioContext\";\nimport { MiniPlayer } from \"@/components/MiniPlayer\";\nimport { ExpandedPlayer } from \"@/components/ExpandedPlayer\";\nimport NotFound from \"@/pages/not-found\";\nimport Assignments from \"@/pages/assignments\";\nimport Chapters from \"@/pages/chapters\";\nimport Player from \"@/pages/player\";\nimport Admin from \"@/pages/admin\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Auto-authenticate when not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      // Redirect to SSO login automatically\n      window.location.href = \"/api/login\";\n    }\n  }, [isAuthenticated, isLoading]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Authenticating...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Assignments} />\n      <Route path=\"/assignments\" component={Assignments} />\n      <Route path=\"/chapters\" component={Chapters} />\n      <Route path=\"/player\" component={Player} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AudioProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n          <MiniPlayer />\n          <ExpandedPlayer />\n        </TooltipProvider>\n      </AudioProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2078},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Updated color palette from design specifications */\n  --primary-orange: hsl(16 100% 60%); /* #ff6b35 */\n  --primary-orange-hover: hsl(14 100% 57%); /* #ff5722 */\n  --orange-tint: hsl(20 100% 97%); /* #fff5f0 */\n  \n  --text-primary: hsl(0 0% 10%); /* #1a1a1a */\n  --text-secondary: hsl(0 0% 40%); /* #666666 */\n  --text-tertiary: hsl(0 0% 60%); /* #999999 */\n  \n  --white: hsl(0 0% 100%); /* #ffffff */\n  --background-page: hsl(0 0% 97%); /* #f8f8f8 */\n  --border-gray: hsl(0 0% 88%); /* #e0e0e0 */\n  \n  /* System color mappings */\n  --background: hsl(0 0% 97%); /* #f8f8f8 */\n  --foreground: hsl(0 0% 10%); /* #1a1a1a */\n  --card: hsl(0 0% 100%); /* #ffffff */\n  --card-foreground: hsl(0 0% 10%); /* #1a1a1a */\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 10%);\n  --primary: hsl(16 100% 60%); /* #ff6b35 */\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-dark: hsl(14 100% 57%); /* #ff5722 */\n  --secondary: hsl(0 0% 40%); /* #666666 */\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 97%); /* Background color */\n  --muted-foreground: hsl(0 0% 40%); /* Secondary text */\n  --accent: hsl(20 100% 97%); /* Orange tint */\n  --accent-foreground: hsl(16 100% 60%); /* Primary orange */\n  --destructive: hsl(0 85% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 88%); /* #e0e0e0 */\n  --input: hsl(0 0% 97%);\n  --ring: hsl(16 100% 60%); /* Primary orange */\n  \n  /* Chart colors */\n  --chart-1: hsl(16 100% 60%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  \n  /* Sidebar */\n  --sidebar: hsl(0 0% 97%);\n  --sidebar-foreground: hsl(0 0% 10%);\n  --sidebar-primary: hsl(16 100% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(20 100% 97%);\n  --sidebar-accent-foreground: hsl(16 100% 60%);\n  --sidebar-border: hsl(0 0% 88%);\n  --sidebar-ring: hsl(16 100% 60%);\n  \n  /* Typography - Updated to system font stack from spec */\n  --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Spacing System from Style Guide */\n  --spacing-xs: 8px;\n  --spacing-sm: 12px;\n  --spacing-default: 16px;\n  --spacing-md: 24px;\n  --spacing-lg: 32px;\n  --spacing-xl: 48px;\n  \n  /* Border Radius from Style Guide */\n  --radius-sm: 4px;\n  --radius-md: 8px;\n  --radius-lg: 12px;\n  --radius-full: 50%;\n  --radius: 0.5rem; /* Default for compatibility */\n  \n  /* Shadow Specifications from Style Guide */\n  --shadow-card: 0px 5px 12px rgba(0, 0, 0, 0.1);\n  --shadow-play-button: 0px 0px 12px rgba(0, 0, 0, 0.1);\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  \n  /* Typography Sizes from Style Guide */\n  --text-xs: 10px;\n  --text-sm: 12px;\n  --text-base: 14px;\n  --text-md: 16px;\n  --text-lg: 18px;\n  --text-xl: 20px;\n  --text-2xl: 24px;\n  --text-3xl: 2rem;\n  \n  /* Typography Tracking */\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Interactive States from Style Guide */\n  --transition-colors: 0.2s;\n  --transition-transform: 0.3s;\n  --opacity-disabled: 0.5;\n}\n\n.dark {\n  /* Dark mode variants - using inverted contrast */\n  --primary-orange: hsl(16 100% 60%); /* Keep orange same */\n  --primary-orange-hover: hsl(14 100% 57%);\n  --orange-tint: hsl(20 20% 15%); /* Darker tint */\n  \n  --text-primary: hsl(0 0% 95%); /* Light text */\n  --text-secondary: hsl(0 0% 70%);\n  --text-tertiary: hsl(0 0% 50%);\n  \n  --white: hsl(0 0% 100%);\n  --background-page: hsl(0 0% 7%); /* Dark background */\n  --border-gray: hsl(0 0% 20%); /* Darker borders */\n  \n  /* System color mappings for dark mode */\n  --background: hsl(0 0% 7%);\n  --foreground: hsl(0 0% 95%);\n  --card: hsl(0 0% 10%);\n  --card-foreground: hsl(0 0% 90%);\n  --popover: hsl(0 0% 10%);\n  --popover-foreground: hsl(0 0% 90%);\n  --primary: hsl(16 100% 60%); /* Keep orange same */\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-dark: hsl(14 100% 57%);\n  --secondary: hsl(0 0% 30%);\n  --secondary-foreground: hsl(0 0% 95%);\n  --muted: hsl(0 0% 10%);\n  --muted-foreground: hsl(0 0% 60%);\n  --accent: hsl(20 20% 15%);\n  --accent-foreground: hsl(16 100% 60%);\n  --destructive: hsl(0 85% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 20%);\n  --input: hsl(0 0% 15%);\n  --ring: hsl(16 100% 60%);\n  \n  /* Chart colors */\n  --chart-1: hsl(16 100% 60%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  \n  /* Sidebar */\n  --sidebar: hsl(0 0% 10%);\n  --sidebar-foreground: hsl(0 0% 90%);\n  --sidebar-primary: hsl(16 100% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(20 20% 15%);\n  --sidebar-accent-foreground: hsl(16 100% 60%);\n  --sidebar-border: hsl(0 0% 20%);\n  --sidebar-ring: hsl(16 100% 60%);\n  \n  /* Typography */\n  --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Keep same spacing system from light mode */\n  --spacing-xs: 8px;\n  --spacing-sm: 12px;\n  --spacing-default: 16px;\n  --spacing-md: 24px;\n  --spacing-lg: 32px;\n  --spacing-xl: 48px;\n  \n  /* Border Radius from Style Guide */\n  --radius-sm: 4px;\n  --radius-md: 8px;\n  --radius-lg: 12px;\n  --radius-full: 50%;\n  --radius: 0.5rem;\n  \n  /* Shadow Specifications (adjusted for dark mode) */\n  --shadow-card: 0px 5px 12px rgba(0, 0, 0, 0.3);\n  --shadow-play-button: 0px 0px 12px rgba(0, 0, 0, 0.3);\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  \n  /* Typography Sizes from Style Guide */\n  --text-xs: 10px;\n  --text-sm: 12px;\n  --text-base: 14px;\n  --text-md: 16px;\n  --text-lg: 18px;\n  --text-xl: 20px;\n  --text-2xl: 24px;\n  --text-3xl: 2rem;\n  \n  /* Typography Tracking */\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Interactive States from Style Guide */\n  --transition-colors: 0.2s;\n  --transition-transform: 0.3s;\n  --opacity-disabled: 0.5;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n    font-size: 16px; /* Increased base font size */\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-medium tracking-tight;\n  }\n  \n  /* Mobile safe area handling for iOS */\n  body {\n    padding-top: env(safe-area-inset-top);\n    padding-bottom: env(safe-area-inset-bottom);\n    padding-left: env(safe-area-inset-left);\n    padding-right: env(safe-area-inset-right);\n  }\n  \n  /* Increase font sizes for better readability */\n  .text-xs { font-size: 13px !important; }\n  .text-sm { font-size: 15px !important; }\n  .text-base { font-size: 17px !important; }\n  .text-md { font-size: 19px !important; }\n  .text-lg { font-size: 21px !important; }\n  .text-xl { font-size: 25px !important; }\n  .text-2xl { font-size: 30px !important; }\n  .text-3xl { font-size: 36px !important; }\n  \n  /* Increase dialog and form text sizes */\n  input, textarea, select {\n    font-size: 16px !important;\n  }\n  \n  button {\n    font-size: 15px !important;\n  }\n  \n  label {\n    font-size: 15px !important;\n  }\n  \n  /* Dialog titles and descriptions */\n  [role=\"dialog\"] h2 {\n    font-size: 22px !important;\n  }\n  \n  [role=\"dialog\"] p {\n    font-size: 15px !important;\n  }\n  \n  /* Card content and descriptions */\n  .card-description, [class*=\"CardDescription\"] {\n    font-size: 15px !important;\n  }\n  \n  /* Form labels and descriptions */\n  [class*=\"FormLabel\"] {\n    font-size: 16px !important;\n    font-weight: 500;\n  }\n  \n  [class*=\"FormDescription\"] {\n    font-size: 14px !important;\n  }\n  \n  /* Select items and dropdown content */\n  [class*=\"SelectItem\"] {\n    font-size: 15px !important;\n  }\n  \n  /* Accordion items */\n  [class*=\"AccordionTrigger\"] {\n    font-size: 16px !important;\n  }\n  \n  /* Admin panel specific sizes */\n  .admin-panel h1, h1 {\n    font-size: 28px !important;\n  }\n  \n  .admin-panel h2, h2 {\n    font-size: 24px !important;\n  }\n  \n  .admin-panel h3, h3 {\n    font-size: 20px !important;\n  }\n\n  /* Touch target optimization */\n  button, [role=\"button\"] {\n    min-height: 44px;\n    min-width: 44px;\n  }\n\n  /* Typography styles based on design spec */\n  .text-page-header {\n    font-size: var(--text-2xl); /* 24px */\n    @apply font-medium leading-tight text-foreground;\n  }\n  \n  .text-section-title {\n    font-size: var(--text-xl); /* 20px */\n    @apply font-medium text-foreground;\n  }\n  \n  .text-chapter-title {\n    font-size: var(--text-lg); /* 18px */\n    @apply font-medium text-foreground;\n  }\n  \n  .text-button {\n    font-size: var(--text-md); /* 16px */\n    @apply font-medium;\n  }\n  \n  .text-dropdown {\n    font-size: var(--text-base); /* 14px */\n  }\n  \n  .text-duration {\n    font-size: var(--text-base); /* 14px */\n    @apply text-muted-foreground;\n  }\n  \n  .text-time-display {\n    font-size: var(--text-xs); /* 10px */\n    @apply text-muted-foreground;\n  }\n}\n\n@layer components {\n  .animate-wave {\n    animation: wave 1.5s ease-in-out infinite;\n  }\n\n  @keyframes wave {\n    0%, 100% { \n      transform: scaleY(1); \n    }\n    50% { \n      transform: scaleY(1.5); \n    }\n  }\n\n  .visualizer-bar {\n    animation: wave 1.5s ease-in-out infinite;\n    animation-play-state: paused;\n  }\n\n  .visualizer-bar.playing {\n    animation-play-state: running;\n  }\n\n  /* Ripple effect for buttons */\n  .ripple {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .ripple::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 107, 53, 0.3);\n    transform: translate(-50%, -50%);\n    transition: width 0.4s, height 0.4s;\n  }\n\n  .ripple:active::before {\n    width: 100px;\n    height: 100px;\n  }\n\n  /* Skip button hover animation */\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 rgba(255, 107, 53, 0.4);\n    }\n    70% {\n      box-shadow: 0 0 0 10px rgba(255, 107, 53, 0);\n    }\n    100% {\n      box-shadow: 0 0 0 0 rgba(255, 107, 53, 0);\n    }\n  }\n\n  .skip-button-hover:hover {\n    animation: pulse 1s infinite;\n  }\n}\n\n@layer utilities {\n  .bg-surface {\n    @apply bg-card;\n  }\n  \n  .text-surface {\n    @apply text-card-foreground;\n  }\n  \n  .bg-background-alt {\n    @apply bg-muted;\n  }\n\n  .shadow-custom {\n    box-shadow: var(--shadow-lg);\n  }\n  \n  /* Shadow utilities from style guide */\n  .shadow-card {\n    box-shadow: var(--shadow-card);\n  }\n  \n  .shadow-play-button {\n    box-shadow: var(--shadow-play-button);\n  }\n  \n  /* Transition utilities from style guide */\n  .transition-colors-custom {\n    transition: color var(--transition-colors), background-color var(--transition-colors), border-color var(--transition-colors);\n  }\n  \n  .transition-transform-custom {\n    transition: transform var(--transition-transform);\n  }\n  \n  /* Spacing utilities */\n  .gap-xs { gap: var(--spacing-xs); }\n  .gap-sm { gap: var(--spacing-sm); }\n  .gap-default { gap: var(--spacing-default); }\n  .gap-md { gap: var(--spacing-md); }\n  .gap-lg { gap: var(--spacing-lg); }\n  .gap-xl { gap: var(--spacing-xl); }\n  \n  .p-xs { padding: var(--spacing-xs); }\n  .p-sm { padding: var(--spacing-sm); }\n  .p-default { padding: var(--spacing-default); }\n  .p-md { padding: var(--spacing-md); }\n  .p-lg { padding: var(--spacing-lg); }\n  .p-xl { padding: var(--spacing-xl); }\n  \n  /* Border radius utilities */\n  .rounded-sm { border-radius: var(--radius-sm); }\n  .rounded-md { border-radius: var(--radius-md); }\n  .rounded-lg { border-radius: var(--radius-lg); }\n  .rounded-full { border-radius: var(--radius-full); }\n  \n  /* Interactive state utilities */\n  .disabled-opacity {\n    opacity: var(--opacity-disabled);\n  }\n  \n  /* Responsive breakpoints from style guide */\n  @media (max-width: 480px) {\n    .mobile-stack {\n      flex-direction: column;\n    }\n    \n    .mobile-padding {\n      padding: var(--spacing-default);\n    }\n  }\n\n  /* Audio Visualizer Orb Animations */\n  .orb-inner {\n    background: radial-gradient(circle, #ff6b35 0%, #ff8c42 40%, rgba(255, 107, 53, 0.3) 70%);\n    animation: pulse-core 2s ease-in-out infinite;\n    box-shadow: 0 0 40px rgba(255, 107, 53, 0.6);\n  }\n\n  .orb-pulse {\n    background: radial-gradient(circle, rgba(255, 107, 53, 0.4) 0%, transparent 70%);\n    animation: pulse-expand 2s ease-in-out infinite;\n  }\n\n  .orb-glow {\n    background: radial-gradient(circle, rgba(255, 140, 66, 0.2) 0%, transparent 60%);\n    animation: glow-rotate 4s linear infinite;\n  }\n\n  /* Core pulsing animation */\n  @keyframes pulse-core {\n    0%, 100% {\n      transform: scale(1);\n      box-shadow: 0 0 40px rgba(255, 107, 53, 0.6);\n    }\n    50% {\n      transform: scale(1.15);\n      box-shadow: 0 0 60px rgba(255, 107, 53, 0.8);\n    }\n  }\n\n  /* Expanding pulse animation */\n  @keyframes pulse-expand {\n    0%, 100% {\n      transform: scale(1);\n      opacity: 0.4;\n    }\n    50% {\n      transform: scale(1.3);\n      opacity: 0.2;\n    }\n  }\n\n  /* Rotating glow animation */\n  @keyframes glow-rotate {\n    0% {\n      transform: rotate(0deg) scale(1);\n      opacity: 0.3;\n    }\n    50% {\n      transform: rotate(180deg) scale(1.2);\n      opacity: 0.5;\n    }\n    100% {\n      transform: rotate(360deg) scale(1);\n      opacity: 0.3;\n    }\n  }\n\n  /* Playing state - faster, brighter animations */\n  .visualizer.playing .orb-inner {\n    animation-duration: 1.5s;\n  }\n\n  .visualizer.playing .orb-pulse {\n    animation-duration: 1.5s;\n  }\n\n  .visualizer.playing .orb-glow {\n    animation-duration: 3s;\n  }\n\n  /* Paused state - slower, dimmer animations */\n  .visualizer.paused .orb-inner {\n    animation-duration: 4s;\n    opacity: 0.5;\n    box-shadow: 0 0 20px rgba(255, 107, 53, 0.3);\n  }\n\n  .visualizer.paused .orb-pulse {\n    animation-duration: 4s;\n    opacity: 0.2;\n  }\n\n  .visualizer.paused .orb-glow {\n    animation-duration: 6s;\n    opacity: 0.15;\n  }\n}\n","size_bytes":15153},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/scripts/setAdmin.ts":{"content":"import { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nasync function setUserAsAdmin(userId: string) {\n  try {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ isAdmin: true })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (updatedUser) {\n      console.log(`User ${userId} has been set as admin`);\n      console.log(`Email: ${updatedUser.email}`);\n      console.log(`Name: ${updatedUser.firstName} ${updatedUser.lastName}`);\n    } else {\n      console.log(`User ${userId} not found`);\n    }\n  } catch (error) {\n    console.error(\"Error setting user as admin:\", error);\n  } finally {\n    process.exit(0);\n  }\n}\n\n// Get user ID from command line arguments\nconst userId = process.argv[2];\n\nif (!userId) {\n  console.log(\"Usage: tsx server/scripts/setAdmin.ts <userId>\");\n  console.log(\"You can find your user ID in the browser console after logging in\");\n  process.exit(1);\n}\n\nsetUserAsAdmin(userId);","size_bytes":985},"server/services/audioService.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\n\nconst writeFile = promisify(fs.writeFile);\nconst mkdir = promisify(fs.mkdir);\nconst unlink = promisify(fs.unlink);\nconst access = promisify(fs.access);\n\nclass AudioService {\n  private downloadDir: string;\n\n  constructor() {\n    this.downloadDir = path.join(process.cwd(), 'downloads', 'audio');\n    this.ensureDownloadDir();\n  }\n\n  private async ensureDownloadDir(): Promise<void> {\n    try {\n      await access(this.downloadDir);\n    } catch {\n      await mkdir(this.downloadDir, { recursive: true });\n    }\n  }\n\n  async downloadAudio(audioUrl: string, chapterId: string): Promise<string> {\n    try {\n      // If audioUrl is a relative path, construct the full URL\n      let fullUrl = audioUrl;\n      if (audioUrl.startsWith('/')) {\n        // Use localhost with the Express server port for internal API calls\n        const port = process.env.PORT || '5000';\n        fullUrl = `http://localhost:${port}${audioUrl}`;\n      }\n      \n      const response = await fetch(fullUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to download audio: ${response.statusText}`);\n      }\n\n      const buffer = await response.arrayBuffer();\n      const filename = `${chapterId}.mp3`;\n      const localPath = path.join(this.downloadDir, filename);\n\n      await writeFile(localPath, Buffer.from(buffer));\n      return localPath;\n    } catch (error) {\n      console.error(`Error downloading audio for chapter ${chapterId}:`, error);\n      throw error;\n    }\n  }\n\n  async deleteDownloadedAudio(chapterId: string): Promise<void> {\n    try {\n      const filename = `${chapterId}.mp3`;\n      const localPath = path.join(this.downloadDir, filename);\n      await unlink(localPath);\n    } catch (error) {\n      console.error(`Error deleting audio for chapter ${chapterId}:`, error);\n      throw error;\n    }\n  }\n\n  getLocalAudioPath(chapterId: string): string {\n    const filename = `${chapterId}.mp3`;\n    return path.join(this.downloadDir, filename);\n  }\n\n  async isAudioDownloaded(chapterId: string): Promise<boolean> {\n    try {\n      const localPath = this.getLocalAudioPath(chapterId);\n      await access(localPath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const audioService = new AudioService();\n","size_bytes":2307},"server/services/bubbleApi.ts":{"content":"interface BubbleCourse {\n  id: string;\n  name: string;\n  description?: string;\n  assignments: BubbleAssignment[];\n}\n\ninterface BubbleAssignment {\n  id: string;\n  title: string;\n  description?: string;\n  order: number;\n  chapters: BubbleChapter[];\n}\n\ninterface BubbleChapter {\n  id: string;\n  title: string;\n  description?: string;\n  audioUrl: string;\n  duration?: number;\n  order: number;\n}\n\nclass BubbleApiService {\n  private apiKey: string;\n  private baseUrl: string;\n  private contentRepoUrl: string;\n\n  constructor() {\n    this.apiKey = process.env.BUBBLE_API_KEY || process.env.VITE_BUBBLE_API_KEY || \"\";\n    this.baseUrl = process.env.BUBBLE_API_URL || process.env.VITE_BUBBLE_API_URL || \"https://api.bubble.io\";\n    this.contentRepoUrl = process.env.CONTENT_REPO_URL || \"https://api.theinstitutes.org/content\";\n    \n    if (!this.apiKey) {\n      console.warn(\"Content repo API key not found. Content sync will require API key configuration.\");\n    }\n  }\n\n  async syncContent(): Promise<void> {\n    if (!this.apiKey) {\n      throw new Error(\"Bubble API key not configured\");\n    }\n\n    try {\n      const courses = await this.fetchCourses();\n      \n      for (const course of courses) {\n        await this.syncCourse(course);\n      }\n    } catch (error) {\n      console.error(\"Error syncing content from Bubble:\", error);\n      throw error;\n    }\n  }\n\n  private async fetchCourses(): Promise<BubbleCourse[]> {\n    const response = await fetch(`${this.baseUrl}/courses`, {\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch courses: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.courses || [];\n  }\n\n  private async syncCourse(bubbleCourse: BubbleCourse): Promise<void> {\n    const { storage } = await import(\"../storage\");\n    \n    // Create or update course\n    const courseData = {\n      name: bubbleCourse.name,\n      description: bubbleCourse.description,\n      bubbleId: bubbleCourse.id,\n    };\n\n    let course = await storage.getCourse(bubbleCourse.id);\n    if (!course) {\n      course = await storage.createCourse(courseData);\n    } else {\n      course = await storage.updateCourse(course.id, courseData);\n    }\n\n    // Sync assignments\n    for (const bubbleAssignment of bubbleCourse.assignments) {\n      await this.syncAssignment(course.id, bubbleAssignment);\n    }\n  }\n\n  private async syncAssignment(courseId: string, bubbleAssignment: BubbleAssignment): Promise<void> {\n    const { storage } = await import(\"../storage\");\n    \n    const assignmentData = {\n      courseId,\n      title: bubbleAssignment.title,\n      description: bubbleAssignment.description,\n      orderIndex: bubbleAssignment.order,\n      bubbleId: bubbleAssignment.id,\n    };\n\n    let assignment = await storage.getAssignment(bubbleAssignment.id);\n    if (!assignment) {\n      assignment = await storage.createAssignment(assignmentData);\n    } else {\n      assignment = await storage.updateAssignment(assignment.id, assignmentData);\n    }\n\n    // Sync chapters\n    for (const bubbleChapter of bubbleAssignment.chapters) {\n      await this.syncChapter(assignment.id, bubbleChapter);\n    }\n  }\n\n  private async syncChapter(assignmentId: string, bubbleChapter: BubbleChapter): Promise<void> {\n    const { storage } = await import(\"../storage\");\n    \n    const chapterData = {\n      assignmentId,\n      title: bubbleChapter.title,\n      description: bubbleChapter.description,\n      audioUrl: bubbleChapter.audioUrl,\n      duration: bubbleChapter.duration,\n      orderIndex: bubbleChapter.order,\n      bubbleId: bubbleChapter.id,\n    };\n\n    let chapter = await storage.getChapter(bubbleChapter.id);\n    if (!chapter) {\n      await storage.createChapter(chapterData);\n    } else {\n      await storage.updateChapter(chapter.id, chapterData);\n    }\n  }\n}\n\nexport const bubbleApiService = new BubbleApiService();\n","size_bytes":3974},"server/services/objectStorageService.ts":{"content":"import { Storage } from '@google-cloud/storage';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { promisify } from 'util';\n// Type definition for multer file\ninterface MulterFile {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  size: number;\n  destination: string;\n  filename: string;\n  path: string;\n  buffer: Buffer;\n}\n\nconst writeFile = promisify(fs.writeFile);\nconst unlink = promisify(fs.unlink);\n\nclass ObjectStorageService {\n  private storage: Storage;\n  private bucketName: string;\n  private privateDir: string;\n\n  constructor() {\n    // For Replit environment, use keyFilename pointing to service account credentials\n    const storageOptions: any = {};\n    \n    // Check if we're in Replit environment with object storage setup\n    if (process.env.DEFAULT_OBJECT_STORAGE_BUCKET_ID) {\n      // Use the Replit-provided authentication\n      if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n        storageOptions.keyFilename = process.env.GOOGLE_APPLICATION_CREDENTIALS;\n      } else {\n        // Replit may provide authentication automatically\n        storageOptions.projectId = 'replit-objstore';\n      }\n    }\n    \n    this.storage = new Storage(storageOptions);\n    this.bucketName = process.env.DEFAULT_OBJECT_STORAGE_BUCKET_ID || '';\n    this.privateDir = process.env.PRIVATE_OBJECT_DIR || '/replit-objstore-acf44322-a117-4f93-bd59-40ae30f5d087/.private';\n  }\n\n  async uploadAudioFile(file: MulterFile, destinationPath: string): Promise<string> {\n    try {\n      // For now, store files locally in a public directory\n      const uploadsDir = path.join(process.cwd(), 'public', 'uploads', 'audio');\n      \n      // Ensure the uploads directory exists\n      if (!fs.existsSync(uploadsDir)) {\n        fs.mkdirSync(uploadsDir, { recursive: true });\n      }\n      \n      // Generate a unique filename\n      const fileName = `${Date.now()}-${destinationPath}`;\n      const filePath = path.join(uploadsDir, fileName);\n      \n      // Read the file and write it to the uploads directory\n      const fileData = fs.readFileSync(file.path);\n      fs.writeFileSync(filePath, fileData);\n      \n      // Clean up the temporary file\n      if (fs.existsSync(file.path)) {\n        await unlink(file.path);\n      }\n      \n      // Return a relative URL that can be served by the Express server\n      const audioUrl = `/uploads/audio/${fileName}`;\n      console.log('Audio file uploaded successfully to:', audioUrl);\n      \n      return audioUrl;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      // Clean up the temporary file on error\n      if (fs.existsSync(file.path)) {\n        await unlink(file.path);\n      }\n      throw error;\n    }\n  }\n\n  async deleteAudioFile(filePath: string): Promise<void> {\n    if (!this.bucketName) {\n      throw new Error('Object storage bucket not configured');\n    }\n\n    try {\n      const bucket = this.storage.bucket(this.bucketName);\n      await bucket.file(filePath).delete();\n    } catch (error) {\n      console.error('Error deleting file from object storage:', error);\n      // Don't throw error if file doesn't exist\n      if ((error as any).code !== 404) {\n        throw error;\n      }\n    }\n  }\n\n  getPublicUrl(filePath: string): string {\n    if (!this.bucketName) {\n      throw new Error('Object storage bucket not configured');\n    }\n\n    return `https://storage.googleapis.com/${this.bucketName}/${filePath}`;\n  }\n}\n\nexport const objectStorageService = new ObjectStorageService();","size_bytes":3508},"client/src/components/AdminPanel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { \n  FolderSync, \n  History, \n  Plus, \n  Edit, \n  Trash, \n  RefreshCw,\n  Upload,\n  Music,\n  Check,\n  AlertCircle,\n  Info,\n  ChevronDown,\n  ChevronRight\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Course, SyncLog, Assignment, Chapter } from \"@shared/schema\";\nimport { UnifiedContentManager } from \"./UnifiedContentManager\";\n\nexport function AdminPanel() {\n  const { toast } = useToast();\n  \n  // Fetch admin setup info\n  const { data: adminSetupInfo } = useQuery<any>({\n    queryKey: [\"/api/admin/setup-info\"],\n  });\n\n  return (\n    <div className=\"py-6 space-y-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-slate-800 mb-2\">Admin Dashboard</h2>\n        <p className=\"text-slate-600\">Manage all course content in one unified interface</p>\n      </div>\n\n      {/* Admin Setup Info */}\n      {adminSetupInfo && !adminSetupInfo.isAdmin && (\n        <Alert className=\"border-amber-200 bg-amber-50\">\n          <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n          <AlertTitle>Admin Access Required</AlertTitle>\n          <AlertDescription className=\"space-y-2\">\n            <p>You need admin privileges to manage course content. To grant yourself admin access:</p>\n            <ol className=\"list-decimal list-inside space-y-1 mt-2\">\n              <li>Open the terminal in your development environment</li>\n              <li>Run this command: <code className=\"bg-amber-100 px-2 py-1 rounded text-sm\">{adminSetupInfo?.setupCommand}</code></li>\n              <li>Refresh this page after running the command</li>\n            </ol>\n            <p className=\"text-sm mt-2\">Your User ID: <strong>{adminSetupInfo?.userId}</strong></p>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Unified Content Manager */}\n      <UnifiedContentManager />\n    </div>\n  );\n}\n\ninterface CourseItemProps {\n  course: Course;\n  expanded: boolean;\n  onToggle: () => void;\n}\n\nfunction CourseItem({ course, expanded, onToggle }: CourseItemProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: assignments = [] } = useQuery<Assignment[]>({\n    queryKey: [\"/api/courses\", course.id, \"assignments\"],\n  });\n\n  const uploadCourseAudioMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/admin/courses/${course.id}/upload-audio`, {\n        baseAudioUrl: null // Will use default content repo URL\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Course Audio Uploaded\",\n        description: `Successfully uploaded audio for ${data.updatedCount} chapters`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\", course.id] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  return (\n    <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n      <div \n        className=\"p-4 cursor-pointer hover:bg-gray-50 transition-colors\"\n        onClick={onToggle}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            {expanded ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n            <div>\n              <h4 className=\"font-medium text-slate-800\">{course.name}</h4>\n              <p className=\"text-sm text-slate-500\">\n                {assignments.length} assignments\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Button\n              onClick={(e) => {\n                e.stopPropagation();\n                uploadCourseAudioMutation.mutate();\n              }}\n              disabled={uploadCourseAudioMutation.isPending}\n              size=\"sm\"\n              className=\"flex items-center gap-2\"\n            >\n              {uploadCourseAudioMutation.isPending ? (\n                <RefreshCw className=\"h-3 w-3 animate-spin\" />\n              ) : (\n                <Upload className=\"h-3 w-3\" />\n              )}\n              Upload Course Audio\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {expanded && (\n        <div className=\"border-t bg-gray-50 p-4\">\n          <div className=\"mb-4 p-3 bg-blue-50 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Course Audio Management:</strong> Click \"Upload Course Audio\" to sync all chapter audio files from the content repository for this entire course.\n            </p>\n          </div>\n          {assignments.length === 0 ? (\n            <p className=\"text-sm text-slate-500\">No assignments found for this course.</p>\n          ) : (\n            <div className=\"space-y-4\">\n              {assignments.map((assignment) => (\n                <AssignmentPreview \n                  key={assignment.id} \n                  assignment={assignment}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface AssignmentPreviewProps {\n  assignment: Assignment;\n}\n\nfunction AssignmentPreview({ assignment }: AssignmentPreviewProps) {\n  const [expanded, setExpanded] = useState(false);\n  \n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", assignment.id, \"chapters\"],\n    enabled: expanded,\n  });\n\n  const uploadedChapters = chapters.filter((ch) => ch.audioUrl).length;\n\n  return (\n    <div className=\"bg-white rounded-lg p-3 border border-gray-200\">\n      <div \n        className=\"flex items-center justify-between cursor-pointer\"\n        onClick={() => setExpanded(!expanded)}\n      >\n        <div className=\"flex items-center gap-2\">\n          {expanded ? <ChevronDown className=\"h-3 w-3\" /> : <ChevronRight className=\"h-3 w-3\" />}\n          <h5 className=\"font-medium text-sm\">{assignment.name}</h5>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {uploadedChapters > 0 && (\n            <Badge variant={uploadedChapters === chapters.length ? \"default\" : \"secondary\"} className=\"text-xs\">\n              {uploadedChapters === chapters.length ? (\n                <span className=\"flex items-center gap-1\">\n                  <Check className=\"h-3 w-3\" />\n                  Complete\n                </span>\n              ) : (\n                `${uploadedChapters}/${chapters.length}`\n              )}\n            </Badge>\n          )}\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {chapters.length} chapters\n          </Badge>\n        </div>\n      </div>\n      \n      {expanded && chapters.length > 0 && (\n        <div className=\"mt-3 space-y-1 pl-5\">\n          {chapters.map((chapter) => (\n            <div key={chapter.id} className=\"flex items-center gap-2 py-1 text-xs\">\n              {chapter.audioUrl ? (\n                <Check className=\"h-3 w-3 text-green-600\" />\n              ) : (\n                <AlertCircle className=\"h-3 w-3 text-amber-600\" />\n              )}\n              <span className={chapter.audioUrl ? \"text-slate-700\" : \"text-slate-500\"}>\n                {chapter.title}\n              </span>\n              {chapter.audioUrl && (\n                <span className=\"text-green-600 ml-auto\">Audio ready</span>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7962},"client/src/components/AppHeader.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronDown, LogOut, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport type { Course, Assignment } from \"@shared/schema\";\nimport NewLogo from \"@/assets/new-logo.png\";\n\ninterface AppHeaderProps {\n  currentCourse?: Course;\n  currentAssignment?: Assignment;\n  onAssignmentChange?: (assignment: Assignment) => void;\n}\n\nexport function AppHeader({ currentCourse, currentAssignment, onAssignmentChange }: AppHeaderProps) {\n  const { user } = useAuth();\n  const [location, navigate] = useLocation();\n  const { data: assignments = [] } = useQuery<Assignment[]>({\n    queryKey: [\"/api/courses\", currentCourse?.id, \"assignments\"],\n    enabled: !!currentCourse?.id,\n  });\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const handleAdminNavigation = () => {\n    if (location === \"/admin\") {\n      navigate(\"/assignments\");\n    } else {\n      navigate(\"/admin\");\n    }\n  };\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border sticky top-0 z-50 h-16 sm:h-20\">\n      <div className=\"w-full px-3 sm:px-6 h-full flex items-center\">\n        <div className=\"flex items-center justify-between w-full gap-2 sm:gap-4\">\n          {/* Course Code - Left (shows only code on mobile, full name on desktop) */}\n          <div className=\"flex-shrink-0\">\n            <h1 className=\"text-lg sm:text-2xl font-medium text-foreground whitespace-nowrap\">\n              {/* On mobile: show only course code */}\n              <span className=\"sm:hidden\">\n                {currentCourse?.code || \"\"}\n              </span>\n              {/* On desktop: show full course name */}\n              <span className=\"hidden sm:inline\">\n                {currentCourse ? (currentCourse.code ? `${currentCourse.code}: ${currentCourse.name}` : currentCourse.name) : \"\"}\n              </span>\n            </h1>\n          </div>\n          \n          {/* Logo - Center */}\n          <div className=\"flex-shrink-0 px-2 sm:px-4\">\n            <img src={NewLogo} alt=\"The Institutes\" className=\"w-10 h-10 sm:w-12 sm:h-12 object-contain\" />\n          </div>\n          \n          {/* Right side - Assignment Dropdown and Actions */}\n          <div className=\"flex items-center gap-1 sm:gap-2\">\n            {/* Assignment Dropdown - More compact on mobile */}\n            {assignments.length > 0 && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 sm:py-2.5 text-xs sm:text-sm font-medium text-foreground bg-white border border-border rounded-lg hover:bg-muted shadow-sm\"\n                  >\n                    <span className=\"truncate max-w-[80px] sm:max-w-[150px] lg:max-w-[200px]\">\n                      {currentAssignment?.title || \"Select\"}\n                    </span>\n                    <ChevronDown className=\"h-3 w-3 sm:h-4 sm:w-4 flex-shrink-0 text-muted-foreground\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56 sm:w-64 max-h-[60vh] overflow-y-auto\">\n                  {assignments.map((assignment) => (\n                    <DropdownMenuItem\n                      key={assignment.id}\n                      onClick={() => onAssignmentChange?.(assignment)}\n                      className=\"cursor-pointer\"\n                    >\n                      <div className=\"flex flex-col\">\n                        <span className=\"font-medium text-sm\">{assignment.title}</span>\n                        {assignment.description && (\n                          <span className=\"text-xs text-muted-foreground line-clamp-2\">\n                            {assignment.description}\n                          </span>\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n            \n            {/* Admin Button - Only visible to admin users, icon only on mobile */}\n            {user?.isAdmin && (\n              <Button\n                onClick={handleAdminNavigation}\n                variant=\"outline\"\n                className=\"flex items-center gap-2 px-2 sm:px-4 py-2 sm:py-2.5 text-sm font-medium text-foreground bg-white border border-border rounded-lg hover:bg-muted shadow-sm\"\n                title={location === \"/admin\" ? \"Back to App\" : \"Admin Settings\"}\n              >\n                <Settings className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">\n                  {location === \"/admin\" ? \"Back to App\" : \"Admin\"}\n                </span>\n              </Button>\n            )}\n            \n            {/* Logout Button - Icon only */}\n            <Button\n              onClick={handleLogout}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 sm:h-9 sm:w-9 rounded-lg hover:bg-accent\"\n              title=\"Logout\"\n            >\n              <LogOut className=\"h-4 w-4 text-muted-foreground\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5506},"client/src/components/AssignmentList.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Headphones, Clock, ChevronRight } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Assignment, Chapter } from \"@shared/schema\";\n\ninterface AssignmentListProps {\n  courseId: string;\n  onAssignmentSelect: (assignment: Assignment) => void;\n}\n\nexport function AssignmentList({ courseId, onAssignmentSelect }: AssignmentListProps) {\n  const { data: assignments = [], isLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/courses\", courseId, \"assignments\"],\n    enabled: !!courseId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-bold text-slate-800 mb-2\">Assignments</h2>\n          <p className=\"text-slate-600\">Loading assignments...</p>\n        </div>\n        <div className=\"space-y-4\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-3 w-3/4\"></div>\n                <div className=\"flex gap-4\">\n                  <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (assignments.length === 0) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-bold text-slate-800 mb-2\">Assignments</h2>\n          <p className=\"text-slate-600\">No assignments available for this course.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-slate-800 mb-2\">Assignments</h2>\n        <p className=\"text-slate-600\">Select an assignment to view available chapters</p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {assignments.map((assignment) => (\n          <AssignmentCard\n            key={assignment.id}\n            assignment={assignment}\n            onClick={() => onAssignmentSelect(assignment)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface AssignmentCardProps {\n  assignment: Assignment;\n  onClick: () => void;\n}\n\nfunction AssignmentCard({ assignment, onClick }: AssignmentCardProps) {\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", assignment.id, \"chapters\"],\n  });\n\n  const totalDuration = chapters.reduce((acc, chapter) => acc + (chapter.duration || 0), 0);\n  const formattedDuration = formatDuration(totalDuration);\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" onClick={onClick}>\n      <CardContent className=\"p-4 sm:p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-base sm:text-lg font-semibold text-slate-800 mb-1 sm:mb-2 line-clamp-2\">\n              {assignment.title}\n            </h3>\n            {assignment.description && (\n              <p className=\"text-slate-600 text-xs sm:text-sm mb-2 sm:mb-3 line-clamp-2\">\n                {assignment.description}\n              </p>\n            )}\n            <div className=\"flex flex-wrap items-center gap-3 sm:gap-4 text-xs sm:text-sm text-slate-500\">\n              <span className=\"flex items-center gap-1\">\n                <Headphones className=\"h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n                {chapters.length} Chapters\n              </span>\n              {totalDuration > 0 && (\n                <span className=\"flex items-center gap-1\">\n                  <Clock className=\"h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n                  {formattedDuration}\n                </span>\n              )}\n            </div>\n          </div>\n          <ChevronRight className=\"text-slate-400 mt-1 sm:mt-2 h-4 w-4 sm:h-5 sm:w-5 flex-shrink-0\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  }\n  return `${minutes}m`;\n}\n","size_bytes":4365},"client/src/components/AudioPlayer.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  ArrowLeft, \n  Play, \n  Pause, \n  SkipBack, \n  SkipForward,\n  ChevronDown,\n  Volume2,\n  VolumeX,\n  Download,\n  Share,\n  ChevronLeft,\n  ChevronRight,\n  Settings2,\n  FastForward\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport { AudioVisualizer } from \"@/components/ui/audio-visualizer\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Assignment, Chapter } from \"@shared/schema\";\n\ninterface AudioPlayerProps {\n  assignment: Assignment;\n  chapter: Chapter;\n  onBack: () => void;\n  onPrevious?: () => void;\n  onNext?: () => void;\n  hasPrevious?: boolean;\n  hasNext?: boolean;\n}\n\nconst playbackSpeeds = [0.5, 0.75, 1, 1.25, 1.5, 2];\n\nexport function AudioPlayer({ \n  assignment, \n  chapter, \n  onBack, \n  onPrevious, \n  onNext,\n  hasPrevious,\n  hasNext \n}: AudioPlayerProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [lastProgressUpdate, setLastProgressUpdate] = useState(0);\n  const [autoAdvance, setAutoAdvance] = useState(true);\n  const [showSettings, setShowSettings] = useState(false);\n\n  const progressMutation = useMutation({\n    mutationFn: async (data: { chapterId: string; currentTime: number; isCompleted: boolean }) => {\n      return await apiRequest(\"POST\", \"/api/progress\", data);\n    },\n  });\n\n  const downloadMutation = useMutation({\n    mutationFn: async (chapterId: string) => {\n      return await apiRequest(\"POST\", `/api/download/${chapterId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Download started\",\n        description: \"Chapter is being downloaded for offline listening\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTimeUpdate = useCallback((currentTime: number) => {\n    // Update progress every 10 seconds to avoid too many API calls\n    if (currentTime - lastProgressUpdate >= 10) {\n      progressMutation.mutate({\n        chapterId: chapter.id,\n        currentTime,\n        isCompleted: false,\n      });\n      setLastProgressUpdate(currentTime);\n    }\n  }, [chapter.id, lastProgressUpdate, progressMutation]);\n\n  const handleEnded = useCallback(() => {\n    // Mark chapter as completed\n    progressMutation.mutate({\n      chapterId: chapter.id,\n      currentTime: chapter.duration || 0,\n      isCompleted: true,\n    });\n    // Auto-advance to next chapter if enabled and available\n    if (autoAdvance && hasNext && onNext) {\n      onNext();\n    }\n  }, [chapter.id, chapter.duration, progressMutation, autoAdvance, hasNext, onNext]);\n\n  const handleLoadedMetadata = useCallback((audioDuration: number) => {\n    // Update chapter duration if not set\n    if (!chapter.duration && audioDuration) {\n      // Could call API to update chapter duration\n    }\n  }, [chapter.duration]);\n\n  // Debug logging\n  console.log(\"AudioPlayer - chapter data:\", chapter);\n  console.log(\"AudioPlayer - audioUrl:\", chapter?.audioUrl);\n\n  const {\n    isPlaying,\n    currentTime,\n    duration,\n    playbackRate,\n    volume,\n    isMuted,\n    isLoading,\n    play,\n    pause,\n    togglePlay,\n    seek,\n    skipForward,\n    skipBackward,\n    changePlaybackRate,\n    changeVolume,\n    toggleMute,\n  } = useAudio({\n    src: chapter.audioUrl || \"\",\n    onTimeUpdate: handleTimeUpdate,\n    onEnded: handleEnded,\n    onLoadedMetadata: handleLoadedMetadata,\n  });\n\n  // Load saved progress on chapter change\n  const { data: progress } = useQuery<{ currentTime: number; isCompleted: boolean }>({\n    queryKey: [\"/api/progress\", chapter.id],\n    enabled: !!chapter.id,\n  });\n\n  useEffect(() => {\n    if (progress?.currentTime && progress.currentTime > 0) {\n      seek(progress.currentTime);\n    }\n  }, [progress, seek]);\n\n  // Update Media Session metadata\n  useEffect(() => {\n    if ('mediaSession' in navigator) {\n      navigator.mediaSession.metadata = new MediaMetadata({\n        title: chapter.title,\n        artist: assignment.title,\n        album: \"The Institutes Audio Learning\",\n        artwork: [\n          {\n            src: '/favicon.ico',\n            sizes: '96x96',\n            type: 'image/png',\n          },\n        ],\n      });\n    }\n  }, [chapter.title, assignment.title]);\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleSeek = (value: number[]) => {\n    const newTime = value[0];\n    seek(newTime);\n  };\n\n  const handleShare = async () => {\n    const shareData = {\n      title: chapter.title,\n      text: `Listen to \"${chapter.title}\" from ${assignment.title}`,\n      url: window.location.href,\n    };\n\n    try {\n      if (navigator.share) {\n        await navigator.share(shareData);\n      } else {\n        await navigator.clipboard.writeText(window.location.href);\n        toast({\n          title: \"Link copied\",\n          description: \"Chapter link copied to clipboard\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error sharing:\", error);\n    }\n  };\n\n  return (\n    <div className=\"py-6\">\n      <Button\n        variant=\"ghost\"\n        onClick={onBack}\n        className=\"flex items-center gap-2 text-primary font-medium mb-4 hover:text-primary-dark\"\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        Back to Chapters\n      </Button>\n\n      {/* Chapter Info */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800 mb-2\">\n          {chapter.title}\n        </h1>\n        <p className=\"text-slate-600\">\n          {assignment.title}\n        </p>\n      </div>\n\n      {/* Audio Visualization */}\n      <div className=\"bg-card rounded-2xl p-8 shadow-lg border border-border mb-8\">\n        <AudioVisualizer isPlaying={isPlaying} className=\"mb-6\" />\n\n        {/* Progress Bar */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n            <span>{formatTime(currentTime)}</span>\n            <span>{formatTime(duration)}</span>\n          </div>\n          <Slider\n            value={[currentTime]}\n            max={duration || 100}\n            step={1}\n            onValueChange={handleSeek}\n            className=\"w-full\"\n            disabled={isLoading}\n          />\n        </div>\n\n        {/* Main Controls - 16px gap between buttons per style guide */}\n        <div className=\"flex items-center justify-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => skipBackward(15)}\n            className=\"p-3 text-muted-foreground hover:text-foreground\"\n          >\n            <SkipBack className=\"h-6 w-6\" />\n          </Button>\n          \n          <Button\n            onClick={togglePlay}\n            disabled={isLoading}\n            className=\"w-16 h-16 bg-primary hover:bg-primary-dark text-white rounded-full shadow-play-button hover:scale-105 transition-all\"\n          >\n            {isLoading ? (\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-white\"></div>\n            ) : isPlaying ? (\n              <Pause className=\"h-8 w-8\" />\n            ) : (\n              <Play className=\"h-8 w-8 ml-1\" />\n            )}\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => skipForward(15)}\n            className=\"p-3 text-muted-foreground hover:text-foreground\"\n          >\n            <SkipForward className=\"h-6 w-6\" />\n          </Button>\n        </div>\n\n        {/* Secondary Controls */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            {/* Playback Speed */}\n            <DropdownMenu modal={false}>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n                  <span>{playbackRate}x</span>\n                  <ChevronDown className=\"h-3 w-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"z-50\" sideOffset={5}>\n                {playbackSpeeds.map((speed) => (\n                  <DropdownMenuItem\n                    key={speed}\n                    onSelect={() => changePlaybackRate(speed)}\n                    className={speed === playbackRate ? \"bg-primary/10\" : \"\"}\n                  >\n                    {speed}x\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n            \n            {/* Volume */}\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleMute}\n                className=\"p-2\"\n              >\n                {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n              </Button>\n              <Slider\n                value={[isMuted ? 0 : volume * 100]}\n                max={100}\n                step={1}\n                onValueChange={(value) => changeVolume(value[0] / 100)}\n                className=\"w-20\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            {/* Download */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => downloadMutation.mutate(chapter.id)}\n              disabled={downloadMutation.isPending}\n              className=\"p-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n            </Button>\n            \n            {/* Share */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleShare}\n              className=\"p-2\"\n            >\n              <Share className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Chapter Navigation */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={onPrevious}\n          disabled={!hasPrevious}\n          className=\"flex items-center gap-2 px-4 py-2 text-slate-600 hover:text-slate-800 disabled:opacity-50\"\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n          <span className=\"text-sm\">Previous</span>\n        </Button>\n        \n        <Button\n          variant=\"ghost\"\n          onClick={onNext}\n          disabled={!hasNext}\n          className=\"flex items-center gap-2 px-4 py-2 text-slate-600 hover:text-slate-800 disabled:opacity-50\"\n        >\n          <span className=\"text-sm\">Next</span>\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Playback Settings */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-base flex items-center justify-between\">\n            <span className=\"flex items-center gap-2\">\n              <Settings2 className=\"h-4 w-4\" />\n              Playback Settings\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"h-6 px-2\"\n            >\n              <ChevronDown className={`h-4 w-4 transition-transform ${showSettings ? 'rotate-180' : ''}`} />\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        {showSettings && (\n          <CardContent className=\"space-y-4 pt-0\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <FastForward className=\"h-4 w-4 text-slate-600\" />\n                <Label htmlFor=\"playback-speed\" className=\"text-sm\">Playback Speed</Label>\n              </div>\n              <DropdownMenu modal={false}>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n                    <span>{playbackRate}x</span>\n                    <ChevronDown className=\"h-3 w-3\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"z-50\" sideOffset={5}>\n                  {playbackSpeeds.map((speed) => (\n                    <DropdownMenuItem\n                      key={speed}\n                      onSelect={() => changePlaybackRate(speed)}\n                      className={speed === playbackRate ? \"bg-primary/10\" : \"\"}\n                    >\n                      {speed}x {speed === 1 && \"(Normal)\"}\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"auto-advance\" className=\"text-sm flex items-center gap-2\">\n                <SkipForward className=\"h-4 w-4 text-slate-600\" />\n                Auto-advance to next chapter\n              </Label>\n              <Switch\n                id=\"auto-advance\"\n                checked={autoAdvance}\n                onCheckedChange={setAutoAdvance}\n              />\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13967},"client/src/components/ChapterList.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause, Download, ChevronRight, ArrowLeft, CheckCircle } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Assignment, Chapter, UserProgress } from \"@shared/schema\";\n\ninterface ChapterListProps {\n  assignment: Assignment;\n  onBack: () => void;\n  onChapterSelect: (chapter: Chapter) => void;\n  currentlyPlaying?: string;\n}\n\nexport function ChapterList({ assignment, onBack, onChapterSelect, currentlyPlaying }: ChapterListProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: chapters = [], isLoading } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", assignment.id, \"chapters\"],\n  });\n  \n  // Debug log removed - no longer needed\n\n  const downloadMutation = useMutation({\n    mutationFn: async (chapterId: string) => {\n      return await apiRequest(\"POST\", `/api/download/${chapterId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Download started\",\n        description: \"Chapter is being downloaded for offline listening\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/downloads\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-bold text-slate-800 mb-2\">Loading...</h2>\n        </div>\n        <div className=\"space-y-3\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-5 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-slate-800 mb-2\">\n          {assignment.title}\n        </h2>\n        <p className=\"text-slate-600\">Choose a chapter to begin listening</p>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {chapters.map((chapter) => (\n          <ChapterCard\n            key={chapter.id}\n            chapter={chapter}\n            isCurrentlyPlaying={currentlyPlaying === chapter.id}\n            onPlay={() => onChapterSelect(chapter)}\n            onDownload={() => downloadMutation.mutate(chapter.id)}\n            isDownloading={downloadMutation.isPending}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface ChapterCardProps {\n  chapter: Chapter;\n  isCurrentlyPlaying: boolean;\n  onPlay: () => void;\n  onDownload: () => void;\n  isDownloading: boolean;\n}\n\nfunction ChapterCard({ chapter, isCurrentlyPlaying, onPlay, onDownload, isDownloading }: ChapterCardProps) {\n  const { data: progress } = useQuery<UserProgress>({\n    queryKey: [\"/api/progress\", chapter.id],\n  });\n\n\n\n  const formatDuration = (seconds: number | null) => {\n    if (seconds === null || seconds === undefined) return \"Unknown duration\";\n    // Ensure we're working with whole seconds by flooring first\n    const totalSeconds = Math.floor(Math.abs(seconds));\n    const minutes = Math.floor(totalSeconds / 60);\n    const secs = totalSeconds % 60; // This is already an integer since totalSeconds is floored\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" onClick={onPlay}>\n      <CardContent className=\"p-3 sm:p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 sm:gap-4 flex-1 min-w-0\">\n            <div className={`w-10 h-10 sm:w-12 sm:h-12 rounded-lg flex items-center justify-center flex-shrink-0 ${\n              isCurrentlyPlaying \n                ? \"bg-amber-100\" \n                : progress?.isCompleted \n                  ? \"bg-green-100\" \n                  : \"bg-primary/10\"\n            }`}>\n              {isCurrentlyPlaying ? (\n                <Pause className=\"text-amber-600 h-4 w-4 sm:h-5 sm:w-5\" />\n              ) : progress?.isCompleted ? (\n                <CheckCircle className=\"text-green-600 h-4 w-4 sm:h-5 sm:w-5\" />\n              ) : (\n                <Play className=\"text-primary h-4 w-4 sm:h-5 sm:w-5\" />\n              )}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-sm sm:text-base text-slate-800 line-clamp-2\">\n                {chapter.title}\n              </h3>\n              <div className=\"flex flex-wrap items-center gap-x-2 gap-y-1 text-xs sm:text-sm text-slate-500\">\n                {(() => {\n                  // Completed chapters\n                  if (progress?.isCompleted) {\n                    return (\n                      <>\n                        <span className=\"whitespace-nowrap\">{formatDuration(Math.floor(chapter.duration || 0))}</span>\n                        <span className=\"hidden sm:inline\">•</span>\n                        <span className=\"text-green-600\">Completed</span>\n                      </>\n                    );\n                  }\n                  // Playing/Paused chapters with progress - show current time and remaining time\n                  if (progress && progress.currentTime && progress.currentTime > 0) {\n                    const currentTimeInt = Math.floor(progress.currentTime);\n                    const remaining = Math.floor((chapter.duration || 0) - progress.currentTime);\n                    const remainingFormatted = remaining > 0 ? `${formatDuration(remaining)} remaining` : null;\n                    return (\n                      <>\n                        <span className=\"whitespace-nowrap\">{formatDuration(currentTimeInt)}</span>\n                        {remainingFormatted && (\n                          <>\n                            <span className=\"hidden sm:inline\">•</span>\n                            <span className=\"whitespace-nowrap\">{remainingFormatted}</span>\n                          </>\n                        )}\n                      </>\n                    );\n                  }\n                  // Unplayed chapters - show only duration\n                  if (chapter.duration) {\n                    return <span className=\"whitespace-nowrap\">{formatDuration(Math.floor(chapter.duration))}</span>;\n                  }\n                  // No duration info\n                  return <span className=\"whitespace-nowrap\">Unknown duration</span>;\n                })()}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-1 sm:gap-2 flex-shrink-0\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onDownload();\n              }}\n              disabled={isDownloading}\n              className=\"p-1.5 sm:p-2 text-slate-400 hover:text-slate-600\"\n            >\n              <Download className=\"h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n            </Button>\n            <ChevronRight className=\"text-slate-400 h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7805},"client/src/components/ExpandedPlayer.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { CircularProgress, LinearProgress } from \"@/components/ui/circular-progress\";\nimport { \n  ChevronDown, \n  Play, \n  Pause, \n  Volume2,\n  VolumeX,\n  Share,\n  Download,\n  Settings2,\n  Cast,\n  Gauge,\n  RotateCcw,\n  RotateCw,\n  Volume1,\n  ListMusic,\n  Music\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAudioContext } from \"@/contexts/AudioContext\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport type { Chapter } from \"@shared/schema\";\n\nconst playbackSpeeds = [0.5, 0.75, 1, 1.25, 1.5, 2];\n\nexport function ExpandedPlayer() {\n  const { toast } = useToast();\n  const { \n    currentChapter, \n    currentAssignment, \n    isExpanded, \n    setIsExpanded,\n    setCurrentTrack,\n    isPlayAllMode,\n    setIsPlayAllMode \n  } = useAudioContext();\n  \n  const [showVolume, setShowVolume] = useState(false);\n\n  // Get all chapters for navigation\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", currentAssignment?.id, \"chapters\"],\n    enabled: !!currentAssignment?.id,\n  });\n\n  const progressMutation = useMutation({\n    mutationFn: async (data: { chapterId: string; currentTime: number; isCompleted: boolean }) => {\n      return await apiRequest(\"POST\", \"/api/progress\", data);\n    },\n  });\n\n  const downloadMutation = useMutation({\n    mutationFn: async (chapterId: string) => {\n      return await apiRequest(\"POST\", `/api/download/${chapterId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Download started\",\n        description: \"Chapter is being downloaded for offline listening\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Use shared audio controls and state from MiniPlayer via context\n  const { audioControls, audioState, isPlaying: contextIsPlaying } = useAudioContext();\n  \n  // Use audio state from context\n  const isPlaying = contextIsPlaying;\n  \n\n  const currentTime = audioState.currentTime;\n  const duration = audioState.duration || currentChapter?.duration || 0;\n  const playbackRate = audioState.playbackRate;\n  const volume = audioState.volume;\n  const isMuted = audioState.isMuted;\n  \n  // Debug log to check if currentTime is updating (removed to reduce console noise)\n  // useEffect(() => {\n  //   console.log(\"ExpandedPlayer - currentTime:\", currentTime, \"duration:\", duration, \"progress:\", (currentTime / duration) * 100);\n  // }, [currentTime, duration]);\n  \n\n  \n  // Use audio controls from context (provided by MiniPlayer)\n  const togglePlay = audioControls?.togglePlay || (() => {});\n  const seek = audioControls?.seek || (() => {});\n  const skipForward = audioControls?.skipForward || (() => {});\n  const skipBackward = audioControls?.skipBackward || (() => {});\n  const changePlaybackRate = audioControls?.changePlaybackRate || (() => {});\n  const changeVolume = audioControls?.changeVolume || (() => {});\n  const toggleMute = audioControls?.toggleMute || (() => {});\n\n  // Load saved progress\n  const { data: progress } = useQuery<{ currentTime: number; isCompleted: boolean }>({\n    queryKey: [\"/api/progress\", currentChapter?.id],\n    enabled: !!currentChapter?.id,\n  });\n\n  useEffect(() => {\n    if (progress?.currentTime && progress.currentTime > 0) {\n      seek(progress.currentTime);\n    }\n  }, [progress, seek]);\n\n  // Removed chapter navigation as per new design\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleSeek = (value: number[]) => {\n    seek(value[0]);\n  };\n\n  const handleShare = async () => {\n    const shareData = {\n      title: currentChapter?.title,\n      text: `Listen to \"${currentChapter?.title}\" from ${currentAssignment?.title}`,\n      url: window.location.href,\n    };\n\n    try {\n      if (navigator.share) {\n        await navigator.share(shareData);\n      } else {\n        await navigator.clipboard.writeText(window.location.href);\n        toast({\n          title: \"Link copied\",\n          description: \"Chapter link copied to clipboard\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error sharing:\", error);\n    }\n  };\n\n  if (!currentChapter || !currentAssignment) return null;\n\n  return (\n    <AnimatePresence>\n      {isExpanded && (\n        <motion.div\n          initial={{ y: \"100%\" }}\n          animate={{ y: 0 }}\n          exit={{ y: \"100%\" }}\n          transition={{ type: \"spring\", damping: 25, stiffness: 300 }}\n          className=\"fixed inset-0 bg-background z-[60] flex flex-col\"\n          style={{ paddingTop: 'env(safe-area-inset-top)' }}\n        >\n          {/* Header with responsive padding */}\n          <div className=\"flex items-center justify-between px-3 sm:px-4 md:px-6 pt-1 pb-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsExpanded(false)}\n              className=\"h-12 w-12 sm:h-16 sm:w-16 md:h-20 md:w-20\"\n            >\n              <ChevronDown className=\"h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12\" />\n            </Button>\n            \n            <div className=\"text-center flex-1\">\n              <p className=\"text-xs text-gray-600 font-semibold\">NOW PLAYING</p>\n            </div>\n\n            {/* Empty div to maintain spacing balance */}\n            <div className=\"h-12 w-12 sm:h-16 sm:w-16 md:h-20 md:w-20\"></div>\n          </div>\n\n          {/* Main content area with compressed mobile spacing */}\n          <div className=\"flex-1 flex flex-col px-4 sm:px-7 md:px-10 pt-2 sm:pt-3 pb-4 sm:pb-10 md:pb-12 overflow-y-auto\">\n            {/* Audio Visualizer - 16px from header */}\n            <div className=\"w-full mb-6 sm:mb-4 relative flex justify-center\">\n              <div className=\"w-[260px] h-[260px] sm:w-[320px] sm:h-[320px] md:w-full md:aspect-square bg-[#2c2d3e] rounded-[20px] flex items-center justify-center overflow-hidden\">\n                <div className={`visualizer ${isPlaying ? 'playing' : 'paused'} w-full h-full flex items-center justify-center relative`}>\n                  <div className=\"center-orb relative w-[200px] sm:w-[220px] md:w-[240px] h-[200px] sm:h-[220px] md:h-[240px] flex items-center justify-center\">\n                    <div className=\"orb-inner absolute w-[100px] sm:w-[110px] md:w-[120px] h-[100px] sm:h-[110px] md:h-[120px] rounded-full\"></div>\n                    <div className=\"orb-pulse absolute w-[160px] sm:w-[180px] md:w-[200px] h-[160px] sm:h-[180px] md:h-[200px] rounded-full\"></div>\n                    <div className=\"orb-glow absolute w-[200px] sm:w-[220px] md:w-[240px] h-[200px] sm:h-[220px] md:h-[240px] rounded-full\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Track info - 24px from visualizer */}\n            <div className=\"text-center mb-6 sm:mb-6 md:mb-9 px-2 sm:px-4\">\n              <h1 className=\"text-[22px] sm:text-[20px] md:text-[22px] font-semibold text-[#333] mb-1.5 sm:mb-2 line-clamp-2 leading-[1.3]\">\n                {currentChapter.title}\n              </h1>\n              <p className=\"text-base sm:text-base font-normal text-[#999] line-clamp-1 leading-[1.4]\">\n                {currentAssignment.title}\n              </p>\n            </div>\n\n            {/* Progress bar - 24px from track info */}\n            <div className=\"mb-0\">\n              <div className=\"relative group\">\n                <div \n                  className=\"relative h-1 bg-[#d3d3d3] cursor-pointer\"\n                  onClick={(e) => {\n                    if (!duration || !seek) return;\n                    const rect = e.currentTarget.getBoundingClientRect();\n                    const x = e.clientX - rect.left;\n                    const percentage = x / rect.width;\n                    const newTime = percentage * duration;\n                    seek(newTime);\n                  }}\n                >\n                  {/* Progress fill */}\n                  <div\n                    className=\"absolute top-0 left-0 h-full bg-[#ff6b35] transition-all duration-100\"\n                    style={{ width: duration ? `${(currentTime / duration) * 100}%` : '0%' }}\n                  />\n                  \n                  {/* Draggable handle */}\n                  <div\n                    className=\"absolute top-1/2 -translate-y-1/2 w-4 h-4 bg-white border-2 border-white rounded-full shadow-md cursor-grab active:cursor-grabbing hover:scale-110 transition-transform touch-none\"\n                    style={{ left: duration ? `${(currentTime / duration) * 100}%` : '0%', marginLeft: '-8px' }}\n                    onMouseDown={(e) => {\n                      if (!duration || !seek) return;\n                      e.preventDefault();\n                      const startX = e.clientX;\n                      const startTime = currentTime;\n                      const rect = e.currentTarget.parentElement?.getBoundingClientRect();\n                      \n                      const handleMouseMove = (moveEvent: MouseEvent) => {\n                        if (!rect || !duration || !seek) return;\n                        const deltaX = moveEvent.clientX - startX;\n                        const deltaPercentage = deltaX / rect.width;\n                        const newTime = Math.max(0, Math.min(duration, startTime + (deltaPercentage * duration)));\n                        seek(newTime);\n                      };\n                      \n                      const handleMouseUp = () => {\n                        document.removeEventListener('mousemove', handleMouseMove);\n                        document.removeEventListener('mouseup', handleMouseUp);\n                      };\n                      \n                      document.addEventListener('mousemove', handleMouseMove);\n                      document.addEventListener('mouseup', handleMouseUp);\n                    }}\n                    onTouchStart={(e) => {\n                      if (!duration || !seek) return;\n                      e.preventDefault();\n                      const touch = e.touches[0];\n                      const startX = touch.clientX;\n                      const startTime = currentTime;\n                      const rect = e.currentTarget.parentElement?.getBoundingClientRect();\n                      \n                      const handleTouchMove = (moveEvent: TouchEvent) => {\n                        if (!rect || !duration || !seek) return;\n                        const touch = moveEvent.touches[0];\n                        const deltaX = touch.clientX - startX;\n                        const deltaPercentage = deltaX / rect.width;\n                        const newTime = Math.max(0, Math.min(duration, startTime + (deltaPercentage * duration)));\n                        seek(newTime);\n                      };\n                      \n                      const handleTouchEnd = () => {\n                        document.removeEventListener('touchmove', handleTouchMove);\n                        document.removeEventListener('touchend', handleTouchEnd);\n                      };\n                      \n                      document.addEventListener('touchmove', handleTouchMove);\n                      document.addEventListener('touchend', handleTouchEnd);\n                    }}\n                  />\n                </div>\n              </div>\n              \n              {/* Time display - 10px from progress bar */}\n              <div className=\"flex justify-between mt-2.5 sm:mt-2\">\n                <span className=\"text-sm text-gray-500 tabular-nums\">\n                  {formatTime(currentTime)}\n                </span>\n                <span className=\"text-sm text-gray-500 tabular-nums\">\n                  -{formatTime(duration - currentTime)}\n                </span>\n              </div>\n            </div>\n\n            {/* Main controls - 28px from time labels */}\n            <div className=\"flex items-center justify-center gap-9 sm:gap-7 md:gap-9 mt-7 sm:mt-4 md:mt-5 mb-3.5 sm:mb-2 md:mb-2.5\">\n              {/* Rewind 15 seconds - Responsive circular design */}\n              <div className=\"relative group\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => skipBackward(15)}\n                  className=\"h-12 w-12 sm:h-14 sm:w-14 rounded-full bg-white border border-[#e0e0e0] hover:border-[#ff6b35] hover:bg-[#fff5f2] transition-all duration-200 hover:scale-105 active:scale-95 group ripple\"\n                >\n                  <RotateCcw className=\"h-5 w-5 sm:h-6 sm:w-6 text-gray-700 group-hover:text-[#ff6b35]\" />\n                </Button>\n                {/* Floating label badge - hidden on mobile */}\n                <span className=\"hidden sm:block absolute -top-2 -right-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-[#ff6b35] text-white text-xs font-semibold rounded-full px-2 py-0.5 pointer-events-none\">\n                  15s\n                </span>\n              </div>\n\n              {/* Play/Pause button - responsive sizing */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={togglePlay}\n                className=\"h-[72px] w-[72px] sm:h-[72px] sm:w-[72px] md:h-[72px] md:w-[72px] bg-[#ff6b35] hover:bg-[#ff6b35]/90 text-white rounded-full shadow-lg hover:scale-105 transition-all hover:shadow-xl active:scale-95\"\n              >\n                {isPlaying ? (\n                  <Pause className=\"h-8 w-8 sm:h-8 sm:w-8 md:h-8 md:w-8 fill-white\" />\n                ) : (\n                  <Play className=\"h-8 w-8 sm:h-8 sm:w-8 md:h-8 md:w-8 ml-1 fill-white\" />\n                )}\n              </Button>\n\n              {/* Forward 30 seconds - Responsive circular design */}\n              <div className=\"relative group\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => skipForward(30)}\n                  className=\"h-12 w-12 sm:h-14 sm:w-14 rounded-full bg-white border border-[#e0e0e0] hover:border-[#ff6b35] hover:bg-[#fff5f2] transition-all duration-200 hover:scale-105 active:scale-95 group ripple\"\n                >\n                  <RotateCw className=\"h-5 w-5 sm:h-6 sm:w-6 text-gray-700 group-hover:text-[#ff6b35]\" />\n                </Button>\n                {/* Floating label badge - hidden on mobile */}\n                <span className=\"hidden sm:block absolute -top-2 -left-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-[#ff6b35] text-white text-xs font-semibold rounded-full px-2 py-0.5 pointer-events-none\">\n                  30s\n                </span>\n              </div>\n            </div>\n\n            {/* Bottom controls - 28px from playback controls, 16px to bottom */}\n            <div className=\"flex items-center w-full mt-3.5 sm:mt-2 md:mt-2.5 mb-4 sm:mb-0\">\n              {/* Left side - Queue/Playlist button */}\n              <div className=\"flex-1 flex justify-start\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsPlayAllMode(!isPlayAllMode)}\n                  className={`p-2 sm:p-3 min-h-[40px] sm:min-h-[48px] transition-all ${isPlayAllMode ? 'bg-primary/10 hover:bg-primary/20 px-3 sm:px-4' : 'hover:bg-gray-100'} flex items-center gap-1 sm:gap-2`}\n                  title={isPlayAllMode ? \"Play All Mode: On\" : \"Play All Mode: Off\"}\n                >\n                  <ListMusic className={`h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 ${isPlayAllMode ? 'text-[#ff6b35]' : 'text-[#666]'}`} />\n                  {isPlayAllMode && (\n                    <span className=\"text-sm sm:text-base font-medium text-[#ff6b35]\">Play All</span>\n                  )}\n                </Button>\n              </div>\n\n              {/* Center - Cast button */}\n              <div className=\"flex-1 flex justify-center\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => {\n                    toast({\n                      title: \"Cast\",\n                      description: \"Casting feature coming soon\",\n                    });\n                  }}\n                  className=\"p-2 sm:p-3 hover:bg-gray-100 transition-colors\"\n                >\n                  <Cast className=\"h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 text-[#666]\" />\n                </Button>\n              </div>\n\n              {/* Right side - Playback speed button */}\n              <div className=\"flex-1 flex justify-end\">\n                <DropdownMenu modal={false}>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\"\n                    className=\"min-h-[40px] min-w-[40px] sm:min-h-[48px] sm:min-w-[48px] p-2 sm:p-3 hover:bg-gray-100 transition-colors text-[#ff6b35] font-semibold text-[16px] sm:text-[18px] md:text-[20px] flex items-center justify-center\"\n                  >\n                    {playbackRate}x\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent \n                  align=\"center\" \n                  sideOffset={8}\n                  className=\"min-w-[120px] z-[100] bg-white rounded-xl shadow-[0_4px_20px_rgba(0,0,0,0.15)] p-2\"\n                  style={{ zIndex: 100 }}\n                >\n                  {playbackSpeeds.map((speed) => (\n                    <DropdownMenuItem\n                      key={speed}\n                      onSelect={() => {\n                        console.log('Speed selected:', speed);\n                        changePlaybackRate(speed);\n                      }}\n                      className=\"px-5 py-3.5 text-[17px] font-medium text-[#333] cursor-pointer hover:bg-[#f5f5f5] rounded-lg focus:bg-[#f5f5f5] focus:outline-none data-[highlighted]:bg-[#f5f5f5] leading-[1.2]\"\n                    >\n                      <span className={`w-full text-center ${\n                        speed === playbackRate ? \"text-[#ff6b35] font-semibold\" : \"\"\n                      }`}>\n                        {speed === 0.5 && \"0.5x\"}\n                        {speed === 0.75 && \"0.75x\"}\n                        {speed === 1 && \"Normal\"}\n                        {speed === 1.25 && \"1.25x\"}\n                        {speed === 1.5 && \"1.5x\"}\n                        {speed === 2 && \"2x\"}\n                      </span>\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n              </div>\n            </div>\n\n\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":19207},"client/src/components/ManualContentUpload.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Upload, \n  Plus, \n  Edit2, \n  Trash2, \n  FileAudio,\n  BookOpen,\n  ListOrdered,\n  ChevronRight,\n  Loader2,\n  Check,\n  X,\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { Course, Assignment, Chapter } from \"@shared/schema\";\n\n// Form schemas\nconst courseSchema = z.object({\n  code: z.string().optional(),\n  name: z.string().min(1, \"Course name is required\"),\n  description: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\nconst assignmentSchema = z.object({\n  courseId: z.string().min(1, \"Course is required\"),\n  title: z.string().min(1, \"Assignment title is required\"),\n  description: z.string().optional(),\n  orderIndex: z.number().min(0),\n});\n\nconst chapterSchema = z.object({\n  assignmentId: z.string().min(1, \"Assignment is required\"),\n  title: z.string().min(1, \"Chapter title is required\"),\n  orderIndex: z.number().min(0),\n  duration: z.number().optional(),\n});\n\nexport function ManualContentUpload() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"courses\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // Queries\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: allAssignments = [], isLoading: assignmentsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/admin/all-assignments\"],\n  });\n\n  // Course form\n  const courseForm = useForm({\n    resolver: zodResolver(courseSchema),\n    defaultValues: {\n      code: \"\",\n      name: \"\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  // Assignment form\n  const assignmentForm = useForm({\n    resolver: zodResolver(assignmentSchema),\n    defaultValues: {\n      courseId: \"\",\n      title: \"\",\n      description: \"\",\n      orderIndex: 0,\n    },\n  });\n\n  // Chapter form\n  const chapterForm = useForm({\n    resolver: zodResolver(chapterSchema),\n    defaultValues: {\n      assignmentId: \"\",\n      title: \"\",\n      description: \"\",\n      orderIndex: 0,\n      duration: 0,\n    },\n  });\n\n  // Mutations\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof courseSchema>) => {\n      return await apiRequest(\"POST\", \"/api/admin/courses\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Course created\",\n        description: \"The course has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      courseForm.reset();\n      setDialogOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCourseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Course> }) => {\n      return await apiRequest(\"PUT\", `/api/admin/courses/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Course updated\",\n        description: \"The course has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setEditingItem(null);\n      setDialogOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCourseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/courses/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Course deleted\",\n        description: \"The course has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof assignmentSchema>) => {\n      return await apiRequest(\"POST\", \"/api/admin/assignments\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Assignment created\",\n        description: \"The assignment has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-assignments\"] });\n      assignmentForm.reset();\n      setDialogOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createChapterMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof chapterSchema> & { audioUrl: string }) => {\n      return await apiRequest(\"POST\", \"/api/admin/chapters\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Chapter created\",\n        description: \"The chapter has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      chapterForm.reset();\n      setSelectedFile(null);\n      setDialogOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select an audio file to upload.\",\n        variant: \"destructive\",\n      });\n      return null;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    const formData = new FormData();\n    formData.append(\"audio\", selectedFile);\n\n    // Create a temporary chapter first to get the ID\n    const chapterData = chapterForm.getValues();\n    \n    try {\n      // First create the chapter with a placeholder URL\n      const newChapter = await apiRequest(\"POST\", \"/api/admin/chapters\", {\n        ...chapterData,\n        audioUrl: \"uploading...\",\n      });\n\n      // Then upload the audio file\n      formData.append(\"chapterId\", (newChapter as any).id);\n\n      const response = await fetch(\"/api/admin/upload-audio\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to upload audio file\");\n      }\n\n      const result = await response.json();\n      setUploadProgress(100);\n      setIsUploading(false);\n\n      return result.audioUrl;\n    } catch (error) {\n      setIsUploading(false);\n      setUploadProgress(0);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload audio file. Please try again.\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleCourseSubmit = (data: z.infer<typeof courseSchema>) => {\n    if (editingItem) {\n      updateCourseMutation.mutate({ id: editingItem.id, data });\n    } else {\n      createCourseMutation.mutate(data);\n    }\n  };\n\n  const handleAssignmentSubmit = (data: z.infer<typeof assignmentSchema>) => {\n    createAssignmentMutation.mutate(data);\n  };\n\n  const handleChapterSubmit = async (data: z.infer<typeof chapterSchema>) => {\n    if (!selectedFile) {\n      toast({\n        title: \"No audio file\",\n        description: \"Please select an audio file for the chapter.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const audioUrl = await handleFileUpload();\n      if (audioUrl) {\n        // Chapter is already created in handleFileUpload\n        toast({\n          title: \"Chapter created\",\n          description: \"The chapter and audio file have been uploaded successfully.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n        chapterForm.reset();\n        setSelectedFile(null);\n        setDialogOpen(false);\n      }\n    } catch (error) {\n      console.error(\"Error creating chapter:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (editingItem && activeTab === \"courses\") {\n      courseForm.reset(editingItem);\n    }\n  }, [editingItem]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Upload className=\"h-5 w-5\" />\n            Manual Content Management\n          </CardTitle>\n          <CardDescription>\n            Manually add courses, assignments, and upload audio chapters\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"courses\">Courses</TabsTrigger>\n              <TabsTrigger value=\"assignments\">Assignments</TabsTrigger>\n              <TabsTrigger value=\"chapters\">Chapters</TabsTrigger>\n            </TabsList>\n\n            {/* Courses Tab */}\n            <TabsContent value=\"courses\" className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-medium\">Manage Courses</h3>\n                <Dialog open={dialogOpen && activeTab === \"courses\"} onOpenChange={setDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button onClick={() => setEditingItem(null)}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Course\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingItem ? \"Edit Course\" : \"Add New Course\"}\n                      </DialogTitle>\n                      <DialogDescription>\n                        Enter the course details below\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...courseForm}>\n                      <form onSubmit={courseForm.handleSubmit(handleCourseSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={courseForm.control}\n                          name=\"code\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Course Code</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g., CPCU 500\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={courseForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Course Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter course name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={courseForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Enter course description\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <DialogFooter>\n                          <Button type=\"submit\" disabled={createCourseMutation.isPending || updateCourseMutation.isPending}>\n                            {createCourseMutation.isPending || updateCourseMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                                Saving...\n                              </>\n                            ) : (\n                              <>Save</>\n                            )}\n                          </Button>\n                        </DialogFooter>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Code</TableHead>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {coursesLoading ? (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center\">\n                          <Loader2 className=\"h-4 w-4 animate-spin mx-auto\" />\n                        </TableCell>\n                      </TableRow>\n                    ) : courses.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center text-muted-foreground\">\n                          No courses found. Add your first course.\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      courses.map((course) => (\n                        <TableRow key={course.id}>\n                          <TableCell className=\"font-medium\">{course.code || \"-\"}</TableCell>\n                          <TableCell>{course.name}</TableCell>\n                          <TableCell className=\"max-w-xs truncate\">\n                            {course.description || \"-\"}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={course.isActive ? \"default\" : \"secondary\"}>\n                              {course.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingItem(course);\n                                  setDialogOpen(true);\n                                }}\n                              >\n                                <Edit2 className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => deleteCourseMutation.mutate(course.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </TabsContent>\n\n            {/* Assignments Tab */}\n            <TabsContent value=\"assignments\" className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-medium\">Manage Assignments</h3>\n                <Dialog open={dialogOpen && activeTab === \"assignments\"} onOpenChange={setDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Assignment\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Add New Assignment</DialogTitle>\n                      <DialogDescription>\n                        Create a new assignment for a course\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...assignmentForm}>\n                      <form onSubmit={assignmentForm.handleSubmit(handleAssignmentSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={assignmentForm.control}\n                          name=\"courseId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Course</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select a course\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {courses.map((course) => (\n                                    <SelectItem key={course.id} value={course.id}>\n                                      {course.code ? `${course.code} - ${course.name}` : course.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={assignmentForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Assignment Title</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter assignment title\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={assignmentForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Enter assignment description\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={assignmentForm.control}\n                          name=\"orderIndex\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Order Index</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"0\" \n                                  {...field} \n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Lower numbers appear first\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <DialogFooter>\n                          <Button type=\"submit\" disabled={createAssignmentMutation.isPending}>\n                            {createAssignmentMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                                Creating...\n                              </>\n                            ) : (\n                              <>Create Assignment</>\n                            )}\n                          </Button>\n                        </DialogFooter>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Course</TableHead>\n                      <TableHead>Assignment Title</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Order</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {assignmentsLoading ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center\">\n                          <Loader2 className=\"h-4 w-4 animate-spin mx-auto\" />\n                        </TableCell>\n                      </TableRow>\n                    ) : allAssignments.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center text-muted-foreground\">\n                          No assignments found. Add your first assignment.\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      allAssignments.map((assignment: any) => (\n                        <TableRow key={assignment.id}>\n                          <TableCell className=\"font-medium\">\n                            {assignment.courseCode ? `${assignment.courseCode} - ${assignment.courseName}` : assignment.courseName}\n                          </TableCell>\n                          <TableCell>{assignment.title}</TableCell>\n                          <TableCell className=\"max-w-xs truncate\">\n                            {assignment.description || \"-\"}\n                          </TableCell>\n                          <TableCell>{assignment.orderIndex}</TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </TabsContent>\n\n            {/* Chapters Tab */}\n            <TabsContent value=\"chapters\" className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-medium\">Upload Audio Chapters</h3>\n                <Dialog open={dialogOpen && activeTab === \"chapters\"} onOpenChange={setDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <FileAudio className=\"h-4 w-4 mr-2\" />\n                      Upload Chapter\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>Upload Audio Chapter</DialogTitle>\n                      <DialogDescription>\n                        Select an assignment and upload an audio file for the chapter\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...chapterForm}>\n                      <form onSubmit={chapterForm.handleSubmit(handleChapterSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={chapterForm.control}\n                          name=\"assignmentId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Assignment</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select an assignment\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {allAssignments.map((assignment: any) => (\n                                    <SelectItem key={assignment.id} value={assignment.id}>\n                                      <div className=\"flex flex-col\">\n                                        <span>{assignment.title}</span>\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          {assignment.courseCode ? `${assignment.courseCode} - ${assignment.courseName}` : assignment.courseName}\n                                        </span>\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={chapterForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Chapter Title</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g., Chapter 1.1: Introduction\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={chapterForm.control}\n                            name=\"orderIndex\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Order Index</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    placeholder=\"0\" \n                                    {...field} \n                                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                  />\n                                </FormControl>\n                                <FormDescription>\n                                  Lower numbers appear first\n                                </FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={chapterForm.control}\n                            name=\"duration\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Duration (seconds)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    placeholder=\"0\" \n                                    {...field} \n                                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                  />\n                                </FormControl>\n                                <FormDescription>\n                                  Audio duration in seconds\n                                </FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label>Audio File</Label>\n                          <div className=\"flex items-center gap-4\">\n                            <Input\n                              type=\"file\"\n                              accept=\"audio/*\"\n                              onChange={(e) => {\n                                const file = e.target.files?.[0];\n                                if (file) {\n                                  setSelectedFile(file);\n                                }\n                              }}\n                            />\n                            {selectedFile && (\n                              <Badge variant=\"secondary\">\n                                {selectedFile.name}\n                              </Badge>\n                            )}\n                          </div>\n                          {isUploading && (\n                            <div className=\"space-y-2\">\n                              <Progress value={uploadProgress} />\n                              <p className=\"text-sm text-muted-foreground\">\n                                Uploading... {uploadProgress}%\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                        <DialogFooter>\n                          <Button type=\"submit\" disabled={isUploading || createChapterMutation.isPending}>\n                            {isUploading || createChapterMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                                Uploading...\n                              </>\n                            ) : (\n                              <>Upload Chapter</>\n                            )}\n                          </Button>\n                        </DialogFooter>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"bg-muted/50 rounded-lg p-4\">\n                <h4 className=\"font-medium mb-2\">Instructions</h4>\n                <ol className=\"list-decimal list-inside space-y-1 text-sm text-muted-foreground\">\n                  <li>Select an assignment from the dropdown</li>\n                  <li>Enter the chapter title and description</li>\n                  <li>Set the order index (lower numbers appear first)</li>\n                  <li>Select an audio file (MP3, WAV, OGG, or WebM)</li>\n                  <li>Click \"Upload Chapter\" to save</li>\n                </ol>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":32605},"client/src/components/MiniPlayer.tsx":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { LinearProgress } from \"@/components/ui/circular-progress\";\nimport { Play, Pause, ChevronUp, X, ListMusic, RotateCcw, RotateCw } from \"lucide-react\";\nimport { useAudioContext } from \"@/contexts/AudioContext\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport type { Chapter } from \"@shared/schema\";\n\nexport function MiniPlayer() {\n  const { \n    currentChapter, \n    currentAssignment, \n    isExpanded, \n    setIsExpanded,\n    clearCurrentTrack,\n    setAudioControls,\n    setAudioState,\n    setIsPlaying,\n    isPlayAllMode,\n    setCurrentTrack,\n    setIsPlayAllMode,\n  } = useAudioContext();\n  \n  const lastProgressUpdateRef = useRef(0);\n\n  const progressMutation = useMutation({\n    mutationFn: async (data: { chapterId: string; currentTime: number; isCompleted: boolean }) => {\n      return await apiRequest(\"POST\", \"/api/progress\", data);\n    },\n  });\n\n  const handleTimeUpdate = useCallback((currentTime: number) => {\n    if (!currentChapter) return;\n    // Update progress every 10 seconds\n    if (currentTime - lastProgressUpdateRef.current >= 10) {\n      progressMutation.mutate({\n        chapterId: currentChapter.id,\n        currentTime,\n        isCompleted: false,\n      });\n      lastProgressUpdateRef.current = currentTime;\n    }\n  }, [currentChapter?.id, progressMutation]);\n\n  // Get all chapters for the current assignment to enable Play All\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", currentAssignment?.id, \"chapters\"],\n    enabled: !!currentAssignment?.id && isPlayAllMode,\n  });\n\n  const handleEnded = useCallback(() => {\n    if (!currentChapter || !currentAssignment) return;\n    \n    // If in Play All mode, advance to the next chapter\n    if (isPlayAllMode && chapters.length > 0) {\n      const currentIndex = chapters.findIndex(ch => ch.id === currentChapter.id);\n      if (currentIndex !== -1 && currentIndex < chapters.length - 1) {\n        // There's a next chapter, play it\n        const nextChapter = chapters[currentIndex + 1];\n        console.log('Play All: Advancing to next chapter:', nextChapter.title);\n        setCurrentTrack(nextChapter, currentAssignment);\n      } else {\n        // No more chapters, end Play All mode\n        console.log('Play All: Finished all chapters');\n        setIsPlayAllMode(false);\n      }\n    }\n  }, [currentChapter, currentAssignment, isPlayAllMode, chapters, setCurrentTrack, setIsPlayAllMode]);\n\n  // Log when we're about to use the audio (reduced logging)\n  // console.log(\"MiniPlayer - Setting up audio with:\", {\n  //   chapterId: currentChapter?.id,\n  //   audioUrl: currentChapter?.audioUrl,\n  //   hasChapter: !!currentChapter,\n  // });\n  \n  const {\n    isPlaying,\n    currentTime,\n    duration,\n    volume,\n    playbackRate,\n    isMuted,\n    togglePlay,\n    seek,\n    play,\n    pause,\n    skipForward,\n    skipBackward,\n    changePlaybackRate,\n    changeVolume,\n    toggleMute,\n  } = useAudio({\n    src: currentChapter?.audioUrl || \"\",\n    onTimeUpdate: handleTimeUpdate,\n    onEnded: handleEnded,\n  });\n\n  // Share audio controls with context (for ExpandedPlayer to use)\n  useEffect(() => {\n    setAudioControls({\n      play,\n      pause,\n      togglePlay,\n      seek,\n      skipForward,\n      skipBackward,\n      changePlaybackRate,\n      changeVolume,\n      toggleMute,\n    });\n  }, [play, pause, togglePlay, seek, skipForward, skipBackward, changePlaybackRate, changeVolume, toggleMute, setAudioControls]);\n\n  // Share audio state with context - update frequently for smooth progress\n  useEffect(() => {\n    setAudioState({\n      currentTime,\n      duration,\n      volume,\n      playbackRate,\n      isMuted,\n    });\n  }, [currentTime, duration, volume, playbackRate, isMuted, setAudioState]);\n  \n  // Update isPlaying state in context\n  useEffect(() => {\n    setIsPlaying(isPlaying);\n  }, [isPlaying, setIsPlaying]);\n\n  // Auto-play when a new chapter is selected (only when chapter changes)\n  const prevChapterIdRef = useRef<string | null>(null);\n  const hasAutoPlayedRef = useRef(false);\n  \n  useEffect(() => {\n    if (currentChapter?.id && currentChapter.id !== prevChapterIdRef.current) {\n      prevChapterIdRef.current = currentChapter.id;\n      hasAutoPlayedRef.current = false;\n      // Reset progress update tracking for new chapter\n      lastProgressUpdateRef.current = 0;\n    }\n  }, [currentChapter?.id]);\n  \n  useEffect(() => {\n    // Auto-play immediately when a new chapter is selected, don't wait for duration\n    if (currentChapter?.id && !hasAutoPlayedRef.current && !isPlaying && play) {\n      hasAutoPlayedRef.current = true;\n      console.log('Auto-playing chapter:', currentChapter.id);\n      // Add small delay to ensure audio element is ready\n      // iOS needs a bit more time to prepare the audio element\n      const autoPlayTimer = setTimeout(() => {\n        play()\n          .then(() => {\n            console.log('Auto-play successful');\n          })\n          .catch((error) => {\n            console.error('Auto-play failed:', error);\n            // On iOS, auto-play might fail initially but work on user interaction\n            // Set flag to false to allow manual play attempt\n            hasAutoPlayedRef.current = false; \n          });\n      }, 200); // Increased delay for iOS compatibility\n      \n      return () => clearTimeout(autoPlayTimer);\n    }\n  }, [currentChapter?.id, isPlaying, play]);\n\n  // Update Media Session metadata\n  useEffect(() => {\n    if (currentChapter && currentAssignment && 'mediaSession' in navigator) {\n      navigator.mediaSession.metadata = new MediaMetadata({\n        title: currentChapter.title,\n        artist: currentAssignment.title,\n        album: \"The Institutes Audio Learning\",\n      });\n\n      navigator.mediaSession.setActionHandler('play', () => togglePlay());\n      navigator.mediaSession.setActionHandler('pause', () => togglePlay());\n    }\n  }, [currentChapter, currentAssignment, togglePlay]);\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleSeek = (value: number[]) => {\n    seek(value[0]);\n  };\n\n  const handleClose = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    clearCurrentTrack();\n    setIsPlayAllMode(false); // Clear Play All mode when closing\n  };\n\n  if (!currentChapter || !currentAssignment) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ y: 100 }}\n        animate={{ y: 0 }}\n        exit={{ y: 100 }}\n        transition={{ type: \"spring\", damping: 25, stiffness: 300 }}\n        className=\"fixed bottom-0 left-0 right-0 z-50\"\n        style={{ \n          height: '80px',\n          background: '#FFFFFF',\n          borderTop: '1px solid #E0E0E0',\n          padding: '12px',\n          paddingBottom: `calc(12px + env(safe-area-inset-bottom))` \n        }}\n        onClick={() => setIsExpanded(true)}\n      >\n        <div className=\"flex items-center\" style={{ gap: '12px', height: '100%' }}>\n          {/* Visualizer */}\n          <div \n            className=\"flex-shrink-0 bg-[#2c2d3e] flex items-center justify-center overflow-hidden\"\n            style={{\n              width: '56px',\n              height: '56px',\n              borderRadius: '8px'\n            }}\n          >\n            <div className={`visualizer ${isPlaying ? 'playing' : 'paused'} w-full h-full flex items-center justify-center relative scale-[0.3]`}>\n              <div className=\"center-orb relative w-[120px] h-[120px] flex items-center justify-center\">\n                <div className=\"orb-inner absolute w-[60px] h-[60px] rounded-full\"></div>\n                <div className=\"orb-pulse absolute w-[100px] h-[100px] rounded-full\"></div>\n                <div className=\"orb-glow absolute w-[120px] h-[120px] rounded-full\"></div>\n              </div>\n            </div>\n          </div>\n\n          {/* Content Wrapper */}\n          <div className=\"flex-1 flex flex-col justify-center\" style={{ gap: '10px', minWidth: 0 }}>\n            {/* Top Row - Title and Controls */}\n            <div className=\"flex items-center\" style={{ gap: '12px' }}>\n              {/* Title */}\n              <p \n                className=\"flex-1 line-clamp-2\"\n                style={{\n                  fontSize: '14px',\n                  fontWeight: 500,\n                  color: '#1A1A1A',\n                  lineHeight: 1.3\n                }}\n              >\n                {currentChapter.title}\n              </p>\n\n              {/* Controls Group */}\n              <div className=\"flex items-center flex-shrink-0\" style={{ gap: '2px' }}>\n                {/* Rewind Button */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    skipBackward(15);\n                  }}\n                  className=\"hover:bg-black/5\"\n                  style={{\n                    width: '36px',\n                    height: '36px',\n                    background: 'transparent',\n                    borderRadius: '50%'\n                  }}\n                >\n                  <RotateCcw className=\"h-5 w-5\" style={{ color: '#1A1A1A' }} />\n                </Button>\n\n                {/* Play/Pause Button */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    togglePlay();\n                  }}\n                  className=\"hover:bg-black/5\"\n                  style={{\n                    width: '40px',\n                    height: '40px',\n                    background: 'transparent',\n                    borderRadius: '50%'\n                  }}\n                >\n                  {isPlaying ? (\n                    <svg \n                      width=\"18\" \n                      height=\"18\" \n                      viewBox=\"0 0 18 18\" \n                      fill=\"none\"\n                      style={{ color: '#1A1A1A' }}\n                    >\n                      <rect x=\"2\" y=\"0\" width=\"4\" height=\"18\" fill=\"currentColor\" />\n                      <rect x=\"12\" y=\"0\" width=\"4\" height=\"18\" fill=\"currentColor\" />\n                    </svg>\n                  ) : (\n                    <svg \n                      width=\"14\" \n                      height=\"18\" \n                      viewBox=\"0 0 14 18\" \n                      fill=\"none\"\n                      style={{ marginLeft: '2px', color: '#1A1A1A' }}\n                    >\n                      <path d=\"M0 0L14 9L0 18V0Z\" fill=\"currentColor\" />\n                    </svg>\n                  )}\n                </Button>\n\n                {/* Fast Forward Button */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    skipForward(30);\n                  }}\n                  className=\"hover:bg-black/5\"\n                  style={{\n                    width: '36px',\n                    height: '36px',\n                    background: 'transparent',\n                    borderRadius: '50%'\n                  }}\n                >\n                  <RotateCw className=\"h-5 w-5\" style={{ color: '#1A1A1A' }} />\n                </Button>\n              </div>\n            </div>\n\n            {/* Progress Container */}\n            <div className=\"flex items-center\" style={{ gap: '8px' }}>\n              {/* Current Time */}\n              <span \n                style={{\n                  fontSize: '11px',\n                  color: '#999999',\n                  minWidth: '28px',\n                  fontFamily: 'monospace'\n                }}\n              >\n                {formatTime(currentTime)}\n              </span>\n\n              {/* Progress Bar - Increased clickable area */}\n              <div \n                className=\"flex-1 relative cursor-pointer\"\n                style={{\n                  height: '20px', // Increased from 3px to 20px for larger click target\n                  display: 'flex',\n                  alignItems: 'center'\n                }}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  if (!duration || !seek) return;\n                  const rect = e.currentTarget.getBoundingClientRect();\n                  const x = e.clientX - rect.left;\n                  const percentage = x / rect.width;\n                  const newTime = percentage * duration;\n                  seek(newTime);\n                }}\n              >\n                {/* Actual visible progress bar */}\n                <div \n                  className=\"w-full relative pointer-events-none\"\n                  style={{\n                    height: '3px',\n                    background: '#E0E0E0',\n                    borderRadius: '2px'\n                  }}\n                >\n                  {/* Progress fill */}\n                  <div\n                    className=\"absolute top-0 left-0 h-full transition-all duration-100\"\n                    style={{ \n                      background: '#FF6B35',\n                      borderRadius: '2px',\n                      width: duration ? `${(currentTime / duration) * 100}%` : '0%' \n                    }}\n                  />\n                  \n                  {/* White circle handle */}\n                  <div\n                    className=\"absolute top-1/2 -translate-y-1/2 w-3 h-3 bg-white rounded-full shadow-sm transition-all duration-100 pointer-events-none\"\n                    style={{ \n                      left: duration ? `${(currentTime / duration) * 100}%` : '0%', \n                      marginLeft: '-6px',\n                      border: '1px solid #FF6B35'\n                    }}\n                  />\n                </div>\n              </div>\n\n              {/* Duration */}\n              <span \n                style={{\n                  fontSize: '11px',\n                  color: '#999999',\n                  minWidth: '28px',\n                  fontFamily: 'monospace',\n                  textAlign: 'right'\n                }}\n              >\n                {formatTime(duration)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","size_bytes":14641},"client/src/components/UnifiedContentManager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Upload, \n  Plus, \n  Edit2, \n  Trash2, \n  FileAudio,\n  BookOpen,\n  ListOrdered,\n  ChevronRight,\n  Loader2,\n  Check,\n  X,\n  Music,\n  FolderSync,\n  RefreshCw,\n  Download,\n  Clock,\n  AlertCircle,\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { Course, Assignment, Chapter } from \"@shared/schema\";\n\n// Form schemas\nconst courseSchema = z.object({\n  code: z.string().optional(),\n  name: z.string().min(1, \"Course name is required\"),\n  description: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\nconst assignmentSchema = z.object({\n  courseId: z.string().min(1, \"Course is required\"),\n  title: z.string().min(1, \"Assignment title is required\"),\n  description: z.string().optional(),\n  orderIndex: z.number().min(0),\n});\n\nconst chapterSchema = z.object({\n  assignmentId: z.string().min(1, \"Assignment is required\"),\n  title: z.string().min(1, \"Chapter title is required\"),\n  orderIndex: z.number().min(0),\n  duration: z.number().optional(),\n});\n\ninterface CourseWithAssignments extends Course {\n  assignments?: AssignmentWithChapters[];\n}\n\ninterface AssignmentWithChapters extends Assignment {\n  chapters?: Chapter[];\n}\n\nexport function UnifiedContentManager() {\n  const { toast } = useToast();\n  const [expandedCourse, setExpandedCourse] = useState<string | null>(null);\n  const [expandedAssignment, setExpandedAssignment] = useState<string | null>(null);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [dialogType, setDialogType] = useState<\"course\" | \"assignment\" | \"chapter\" | null>(null);\n  const [deleteItem, setDeleteItem] = useState<any>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const [selectedCourseForAssignment, setSelectedCourseForAssignment] = useState<string>(\"\");\n  const [selectedAssignmentForChapter, setSelectedAssignmentForChapter] = useState<string>(\"\");\n\n  // Queries\n  const { data: courses = [], isLoading: coursesLoading, refetch: refetchCourses } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: syncStatus } = useQuery({\n    queryKey: [\"/api/admin/sync-status\"],\n  });\n\n  // Form instances\n  const courseForm = useForm({\n    resolver: zodResolver(courseSchema),\n    defaultValues: {\n      code: \"\",\n      name: \"\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  const assignmentForm = useForm({\n    resolver: zodResolver(assignmentSchema),\n    defaultValues: {\n      courseId: \"\",\n      title: \"\",\n      description: \"\",\n      orderIndex: 0,\n    },\n  });\n\n  const chapterForm = useForm({\n    resolver: zodResolver(chapterSchema),\n    defaultValues: {\n      assignmentId: \"\",\n      title: \"\",\n      orderIndex: 0,\n      duration: 0,\n    },\n  });\n\n  // Load all assignments\n  const { data: allAssignments = [] } = useQuery<Assignment[]>({\n    queryKey: [\"/api/admin/all-assignments\"],\n  });\n\n  // Load all chapters\n  const { data: allChapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/admin/all-chapters\"],\n  });\n\n  // Organize data hierarchically\n  const coursesWithData = courses.map(course => {\n    const courseAssignments = allAssignments\n      .filter(a => a.courseId === course.id)\n      .map(assignment => {\n        const assignmentChapters = allChapters.filter(c => c.assignmentId === assignment.id);\n        return { ...assignment, chapters: assignmentChapters };\n      });\n    return { ...course, assignments: courseAssignments };\n  });\n\n  // Course mutations\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof courseSchema>) => {\n      return await apiRequest(\"POST\", \"/api/admin/courses\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Course created\", description: \"The course has been created successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      courseForm.reset();\n      setDialogType(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateCourseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Course> }) => {\n      return await apiRequest(\"PUT\", `/api/admin/courses/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Course updated\", description: \"The course has been updated successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setEditingItem(null);\n      setDialogType(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteCourseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/courses/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Course deleted\", description: \"The course has been deleted successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setDeleteItem(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Assignment mutations\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof assignmentSchema>) => {\n      return await apiRequest(\"POST\", \"/api/admin/assignments\", data);\n    },\n    onSuccess: (_, variables) => {\n      toast({ title: \"Assignment created\", description: \"The assignment has been created successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/courses/${variables.courseId}/assignments`] });\n      assignmentForm.reset();\n      setDialogType(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateAssignmentMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Assignment> }) => {\n      return await apiRequest(\"PUT\", `/api/admin/assignments/${id}`, data);\n    },\n    onSuccess: (_, variables) => {\n      toast({ title: \"Assignment updated\", description: \"The assignment has been updated successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setEditingItem(null);\n      setDialogType(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/assignments/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Assignment deleted\", description: \"The assignment has been deleted successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setDeleteItem(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Chapter mutations\n  const createChapterMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof chapterSchema> & { audioUrl: string }) => {\n      return await apiRequest(\"POST\", \"/api/admin/chapters\", data);\n    },\n    onSuccess: (_, variables) => {\n      toast({ title: \"Chapter created\", description: \"The chapter has been created successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-chapters\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/assignments/${variables.assignmentId}/chapters`] });\n      chapterForm.reset();\n      setSelectedFile(null);\n      setDialogType(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateChapterMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Chapter> }) => {\n      return await apiRequest(\"PUT\", `/api/admin/chapters/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Chapter updated\", description: \"The chapter has been updated successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-chapters\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      setEditingItem(null);\n      setDialogType(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteChapterMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/chapters/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Chapter deleted\", description: \"The chapter has been deleted successfully.\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-chapters\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      setDeleteItem(null);\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Sync mutation\n  const syncMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/sync\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Content Sync Started\", description: \"Syncing course audio from content repository API\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/sync-status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n    },\n    onError: (error) => {\n      toast({ title: \"Sync Failed\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // File upload handler\n  const handleFileUpload = async (chapterData: z.infer<typeof chapterSchema>) => {\n    if (!selectedFile) {\n      toast({ title: \"No file selected\", description: \"Please select an audio file to upload.\", variant: \"destructive\" });\n      return null;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Upload the file first, then create the chapter with the audio URL\n      const formData = new FormData();\n      formData.append(\"audio\", selectedFile);\n\n      // Upload to a temporary endpoint that doesn't require chapter ID\n      const uploadResponse = await fetch(\"/api/admin/upload-temp-audio\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!uploadResponse.ok) {\n        const errorText = await uploadResponse.text();\n        console.error(\"Upload error:\", errorText);\n        throw new Error(`Failed to upload audio file: ${uploadResponse.status}`);\n      }\n\n      const uploadResult = await uploadResponse.json();\n      setUploadProgress(100);\n\n      // Now create the chapter with the actual audio URL\n      const newChapter = await apiRequest(\"POST\", \"/api/admin/chapters\", {\n        ...chapterData,\n        audioUrl: uploadResult.audioUrl,\n      }) as any;\n\n      setIsUploading(false);\n      return { chapterId: newChapter.id, audioUrl: uploadResult.audioUrl };\n    } catch (error) {\n      setIsUploading(false);\n      setUploadProgress(0);\n      console.error(\"Upload error:\", error);\n      toast({ title: \"Upload failed\", description: \"Failed to upload audio file. Please try again.\", variant: \"destructive\" });\n      throw error;\n    }\n  };\n\n  // Form submit handlers\n  const handleCourseSubmit = (data: z.infer<typeof courseSchema>) => {\n    if (editingItem) {\n      updateCourseMutation.mutate({ id: editingItem.id, data });\n    } else {\n      createCourseMutation.mutate(data);\n    }\n  };\n\n  const handleAssignmentSubmit = (data: z.infer<typeof assignmentSchema>) => {\n    if (editingItem) {\n      updateAssignmentMutation.mutate({ id: editingItem.id, data });\n    } else {\n      createAssignmentMutation.mutate(data);\n    }\n  };\n\n  const handleChapterSubmit = async (data: z.infer<typeof chapterSchema>) => {\n    if (editingItem) {\n      updateChapterMutation.mutate({ id: editingItem.id, data });\n    } else {\n      if (!selectedFile) {\n        toast({ title: \"No audio file\", description: \"Please select an audio file for the chapter.\", variant: \"destructive\" });\n        return;\n      }\n\n      try {\n        const result = await handleFileUpload(data);\n        if (result) {\n          toast({ title: \"Chapter created\", description: \"The chapter and audio file have been uploaded successfully.\" });\n          queryClient.invalidateQueries({ queryKey: [\"/api/admin/all-chapters\"] });\n          queryClient.invalidateQueries({ queryKey: [`/api/assignments/${data.assignmentId}/chapters`] });\n          chapterForm.reset();\n          setSelectedFile(null);\n          setDialogType(null);\n        }\n      } catch (error) {\n        console.error(\"Error creating chapter:\", error);\n      }\n    }\n  };\n\n  // Dialog handlers\n  const openDialog = (type: \"course\" | \"assignment\" | \"chapter\", item?: any, parentId?: string) => {\n    setDialogType(type);\n    setEditingItem(item || null);\n\n    if (type === \"course\") {\n      if (item) {\n        courseForm.reset(item);\n      } else {\n        courseForm.reset({ code: \"\", name: \"\", description: \"\", isActive: true });\n      }\n    } else if (type === \"assignment\") {\n      if (item) {\n        assignmentForm.reset(item);\n      } else {\n        assignmentForm.reset({ courseId: parentId || \"\", title: \"\", description: \"\", orderIndex: 0 });\n        setSelectedCourseForAssignment(parentId || \"\");\n      }\n    } else if (type === \"chapter\") {\n      if (item) {\n        chapterForm.reset(item);\n      } else {\n        chapterForm.reset({ assignmentId: parentId || \"\", title: \"\", orderIndex: 0, duration: 0 });\n        setSelectedAssignmentForChapter(parentId || \"\");\n      }\n    }\n  };\n\n  const formatDuration = (seconds: number | null | undefined) => {\n    if (!seconds) return \"Unknown\";\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  useEffect(() => {\n    if (selectedCourseForAssignment) {\n      assignmentForm.setValue(\"courseId\", selectedCourseForAssignment);\n    }\n  }, [selectedCourseForAssignment]);\n\n  useEffect(() => {\n    if (selectedAssignmentForChapter) {\n      chapterForm.setValue(\"assignmentId\", selectedAssignmentForChapter);\n    }\n  }, [selectedAssignmentForChapter]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Course Management\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                onClick={() => syncMutation.mutate()}\n                disabled={syncMutation.isPending || (syncStatus as any)?.status === \"in_progress\"}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex items-center gap-2\"\n              >\n                {syncMutation.isPending || (syncStatus as any)?.status === \"in_progress\" ? (\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <FolderSync className=\"h-4 w-4\" />\n                )}\n                Sync from API\n              </Button>\n              <Button onClick={() => openDialog(\"course\")} size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Course\n              </Button>\n            </div>\n          </CardTitle>\n          <CardDescription>\n            Manage all courses, assignments, and chapters in one place\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {coursesLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-12 bg-gray-200 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : coursesWithData.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <BookOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium\">No courses available</p>\n              <p className=\"text-sm mt-2\">Add a course manually or sync from the API</p>\n            </div>\n          ) : (\n            <Accordion type=\"single\" collapsible value={expandedCourse || undefined} onValueChange={(value) => setExpandedCourse(value)}>\n              {coursesWithData.map((course) => (\n                <AccordionItem key={course.id} value={course.id}>\n                  <div className=\"flex items-center group\">\n                    <AccordionTrigger className=\"hover:no-underline flex-1 pr-2\">\n                      <div className=\"flex items-center justify-between w-full\">\n                        <div className=\"flex flex-col items-start\">\n                          <div className=\"font-medium text-left\">\n                            {course.code ? `${course.code} - ${course.name}` : course.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground mt-1\">\n                            {course.assignments?.length || 0} assignment{(course.assignments?.length || 0) !== 1 ? 's' : ''}\n                          </div>\n                        </div>\n                      </div>\n                    </AccordionTrigger>\n                    <div className=\"flex items-center gap-1 pr-4 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          openDialog(\"assignment\", null, course.id);\n                        }}\n                        title=\"Add Assignment\"\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          openDialog(\"course\", course);\n                        }}\n                        title=\"Edit Course\"\n                      >\n                        <Edit2 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setDeleteItem({ type: \"course\", item: course });\n                        }}\n                        title=\"Delete Course\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <AccordionContent>\n                    <div className=\"pl-6 space-y-2\">\n                      {course.assignments?.length === 0 ? (\n                        <p className=\"text-sm text-muted-foreground py-2\">No assignments yet. Click + to add one.</p>\n                      ) : (\n                        <Accordion type=\"single\" collapsible value={expandedAssignment || undefined} onValueChange={(value) => setExpandedAssignment(value)}>\n                          {course.assignments?.map((assignment) => (\n                            <AccordionItem key={assignment.id} value={assignment.id}>\n                              <div className=\"flex items-center group\">\n                                <AccordionTrigger className=\"hover:no-underline flex-1 pr-2\">\n                                  <div className=\"flex items-center justify-between w-full\">\n                                    <div className=\"flex flex-col items-start\">\n                                      <div className=\"font-medium text-left\">{assignment.title}</div>\n                                      <div className=\"text-sm text-muted-foreground mt-1\">\n                                        {assignment.chapters?.length || 0} chapter{(assignment.chapters?.length || 0) !== 1 ? 's' : ''}\n                                      </div>\n                                    </div>\n                                  </div>\n                                </AccordionTrigger>\n                                <div className=\"flex items-center gap-1 pr-4 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      openDialog(\"chapter\", null, assignment.id);\n                                    }}\n                                    title=\"Add Chapter\"\n                                  >\n                                    <FileAudio className=\"h-4 w-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      openDialog(\"assignment\", assignment);\n                                    }}\n                                    title=\"Edit Assignment\"\n                                  >\n                                    <Edit2 className=\"h-4 w-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      setDeleteItem({ type: \"assignment\", item: assignment });\n                                    }}\n                                    title=\"Delete Assignment\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n                              <AccordionContent>\n                                <div className=\"pl-6 space-y-2\">\n                                  {assignment.chapters?.length === 0 ? (\n                                    <p className=\"text-sm text-muted-foreground py-2\">No chapters yet. Click the audio icon to add one.</p>\n                                  ) : (\n                                    assignment.chapters?.map((chapter) => (\n                                      <div key={chapter.id} className=\"group flex items-center justify-between py-3 px-4 hover:bg-muted/50 rounded-lg transition-colors\">\n                                        <div className=\"flex items-center gap-3 flex-1\">\n                                          <Music className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                                          <div className=\"flex-1 min-w-0\">\n                                            <div className=\"text-sm font-medium truncate\">{chapter.title}</div>\n                                            <div className=\"text-xs text-muted-foreground mt-0.5\">\n                                              Duration: {formatDuration(chapter.duration)}\n                                            </div>\n                                          </div>\n                                        </div>\n                                        <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                          <Button\n                                            variant=\"ghost\"\n                                            size=\"sm\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              openDialog(\"chapter\", chapter);\n                                            }}\n                                            title=\"Edit Chapter\"\n                                          >\n                                            <Edit2 className=\"h-3 w-3\" />\n                                          </Button>\n                                          <Button\n                                            variant=\"ghost\"\n                                            size=\"sm\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              setDeleteItem({ type: \"chapter\", item: chapter });\n                                            }}\n                                            title=\"Delete Chapter\"\n                                          >\n                                            <Trash2 className=\"h-3 w-3\" />\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    ))\n                                  )}\n                                </div>\n                              </AccordionContent>\n                            </AccordionItem>\n                          ))}\n                        </Accordion>\n                      )}\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Course Dialog */}\n      <Dialog open={dialogType === \"course\"} onOpenChange={(open) => !open && setDialogType(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingItem ? \"Edit Course\" : \"Add New Course\"}</DialogTitle>\n            <DialogDescription>\n              {editingItem ? \"Update the course details\" : \"Create a new course\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...courseForm}>\n            <form onSubmit={courseForm.handleSubmit(handleCourseSubmit)} className=\"space-y-4\">\n              <FormField\n                control={courseForm.control}\n                name=\"code\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Course Code</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., CPCU 500\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={courseForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Course Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter course name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={courseForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Enter course description\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\" disabled={createCourseMutation.isPending || updateCourseMutation.isPending}>\n                  {createCourseMutation.isPending || updateCourseMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>Save</>\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Dialog */}\n      <Dialog open={dialogType === \"assignment\"} onOpenChange={(open) => !open && setDialogType(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingItem ? \"Edit Assignment\" : \"Add New Assignment\"}</DialogTitle>\n            <DialogDescription>\n              {editingItem ? \"Update the assignment details\" : \"Create a new assignment\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...assignmentForm}>\n            <form onSubmit={assignmentForm.handleSubmit(handleAssignmentSubmit)} className=\"space-y-4\">\n              {!editingItem && (\n                <FormField\n                  control={assignmentForm.control}\n                  name=\"courseId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Course</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a course\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {coursesWithData.map((course) => (\n                            <SelectItem key={course.id} value={course.id}>\n                              {course.code ? `${course.code} - ${course.name}` : course.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n              <FormField\n                control={assignmentForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assignment Title</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter assignment title\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={assignmentForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Enter assignment description\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={assignmentForm.control}\n                name=\"orderIndex\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Order Index</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"0\" \n                        {...field} \n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      />\n                    </FormControl>\n                    <FormDescription>Lower numbers appear first</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\" disabled={createAssignmentMutation.isPending || updateAssignmentMutation.isPending}>\n                  {createAssignmentMutation.isPending || updateAssignmentMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>Save</>\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Chapter Dialog */}\n      <Dialog open={dialogType === \"chapter\"} onOpenChange={(open) => !open && setDialogType(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>{editingItem ? \"Edit Chapter\" : \"Upload Audio Chapter\"}</DialogTitle>\n            <DialogDescription>\n              {editingItem ? \"Update the chapter details\" : \"Create a new chapter with audio\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...chapterForm}>\n            <form onSubmit={chapterForm.handleSubmit(handleChapterSubmit)} className=\"space-y-4\">\n              {!editingItem && (\n                <FormField\n                  control={chapterForm.control}\n                  name=\"assignmentId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assignment</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select an assignment\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {coursesWithData.flatMap(course => \n                            course.assignments?.map((assignment) => (\n                              <SelectItem key={assignment.id} value={assignment.id}>\n                                <div className=\"flex flex-col items-start w-full\">\n                                  <span className=\"font-medium\">{assignment.title}</span>\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {course.code ? `${course.code} - ${course.name}` : course.name}\n                                  </span>\n                                </div>\n                              </SelectItem>\n                            )) || []\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n              <FormField\n                control={chapterForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Chapter Title</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Chapter 1.1: Introduction\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={chapterForm.control}\n                  name=\"orderIndex\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Order Index</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"0\" \n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormDescription>Lower numbers appear first</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={chapterForm.control}\n                  name=\"duration\"\n                  render={({ field }) => {\n                    const totalSeconds = field.value || 0;\n                    const minutes = Math.floor(totalSeconds / 60);\n                    const seconds = totalSeconds % 60;\n\n                    const updateDuration = (newMinutes: number, newSeconds: number) => {\n                      const total = newMinutes * 60 + newSeconds;\n                      field.onChange(total);\n                    };\n\n                    return (\n                      <FormItem>\n                        <FormLabel>Duration</FormLabel>\n                        <FormControl>\n                          <div className=\"flex items-center gap-2\">\n                            <Input\n                              type=\"text\"\n                              placeholder=\"0\"\n                              value={minutes || ''}\n                              onChange={(e) => {\n                                const val = e.target.value.replace(/\\D/g, '');\n                                const newMinutes = val === '' ? 0 : parseInt(val);\n                                updateDuration(newMinutes, seconds);\n                              }}\n                              className=\"w-20\"\n                            />\n                            <span className=\"text-sm text-muted-foreground\">min</span>\n                            <Input\n                              type=\"text\"\n                              placeholder=\"0\"\n                              value={seconds || ''}\n                              onChange={(e) => {\n                                const val = e.target.value.replace(/\\D/g, '');\n                                const newSeconds = val === '' ? 0 : Math.min(parseInt(val), 59);\n                                updateDuration(minutes, newSeconds);\n                              }}\n                              className=\"w-20\"\n                            />\n                            <span className=\"text-sm text-muted-foreground\">sec</span>\n                          </div>\n                        </FormControl>\n                        <FormDescription>Audio duration in minutes and seconds</FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    );\n                  }}\n                />\n              </div>\n              {!editingItem && (\n                <div className=\"space-y-2\">\n                  <Label>Audio File</Label>\n                  <div className=\"flex items-center gap-4\">\n                    <Input\n                      type=\"file\"\n                      accept=\"audio/*\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) {\n                          setSelectedFile(file);\n                        }\n                      }}\n                    />\n                    {selectedFile && (\n                      <Badge variant=\"secondary\">\n                        {selectedFile.name}\n                      </Badge>\n                    )}\n                  </div>\n                  {isUploading && (\n                    <div className=\"space-y-2\">\n                      <Progress value={uploadProgress} />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Uploading... {uploadProgress}%\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n              <DialogFooter>\n                <Button type=\"submit\" disabled={isUploading || createChapterMutation.isPending || updateChapterMutation.isPending}>\n                  {isUploading || createChapterMutation.isPending || updateChapterMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      {editingItem ? \"Saving...\" : \"Uploading...\"}\n                    </>\n                  ) : (\n                    <>{editingItem ? \"Save\" : \"Upload Chapter\"}</>\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteItem} onOpenChange={(open) => !open && setDeleteItem(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete the {deleteItem?.type} \"{deleteItem?.item?.name || deleteItem?.item?.title}\".\n              {deleteItem?.type === \"course\" && \" All assignments and chapters within this course will also be deleted.\"}\n              {deleteItem?.type === \"assignment\" && \" All chapters within this assignment will also be deleted.\"}\n              This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (deleteItem?.type === \"course\") {\n                  deleteCourseMutation.mutate(deleteItem.item.id);\n                } else if (deleteItem?.type === \"assignment\") {\n                  deleteAssignmentMutation.mutate(deleteItem.item.id);\n                } else if (deleteItem?.type === \"chapter\") {\n                  deleteChapterMutation.mutate(deleteItem.item.id);\n                }\n              }}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":43457},"client/src/contexts/AudioContext.tsx":{"content":"import { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport type { Chapter, Assignment } from '@shared/schema';\n\ninterface AudioContextType {\n  currentChapter: Chapter | null;\n  currentAssignment: Assignment | null;\n  isPlaying: boolean;\n  isExpanded: boolean;\n  isPlayAllMode: boolean;\n  setCurrentTrack: (chapter: Chapter, assignment: Assignment) => void;\n  clearCurrentTrack: () => void;\n  setIsPlaying: (playing: boolean) => void;\n  setIsExpanded: (expanded: boolean) => void;\n  setIsPlayAllMode: (playAll: boolean) => void;\n  toggleExpanded: () => void;\n  // Shared audio controls\n  audioControls: {\n    play: () => void;\n    pause: () => void;\n    togglePlay: () => void;\n    seek: (time: number) => void;\n    skipForward: (seconds: number) => void;\n    skipBackward: (seconds: number) => void;\n    changePlaybackRate: (rate: number) => void;\n    changeVolume: (volume: number) => void;\n    toggleMute: () => void;\n  } | null;\n  setAudioControls: (controls: AudioContextType['audioControls']) => void;\n  // Shared audio state\n  audioState: {\n    currentTime: number;\n    duration: number;\n    volume: number;\n    playbackRate: number;\n    isMuted: boolean;\n  };\n  setAudioState: (state: AudioContextType['audioState']) => void;\n}\n\nconst AudioContext = createContext<AudioContextType | undefined>(undefined);\n\nexport function AudioProvider({ children }: { children: ReactNode }) {\n  const [currentChapter, setCurrentChapter] = useState<Chapter | null>(null);\n  const [currentAssignment, setCurrentAssignment] = useState<Assignment | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isPlayAllMode, setIsPlayAllMode] = useState(false);\n  const [audioControls, setAudioControls] = useState<AudioContextType['audioControls']>(null);\n  const [audioState, setAudioState] = useState<AudioContextType['audioState']>({\n    currentTime: 0,\n    duration: 0,\n    volume: 1,\n    playbackRate: 1,\n    isMuted: false,\n  });\n\n  const setCurrentTrack = useCallback((chapter: Chapter, assignment: Assignment) => {\n    setCurrentChapter(chapter);\n    setCurrentAssignment(assignment);\n    // Don't set isPlaying here - let the audio hook manage it\n    // Don't auto-expand, let user click to expand\n  }, []);\n\n  const clearCurrentTrack = useCallback(() => {\n    setCurrentChapter(null);\n    setCurrentAssignment(null);\n    setIsPlaying(false);\n    setIsExpanded(false);\n    setIsPlayAllMode(false);\n  }, []);\n\n  const toggleExpanded = useCallback(() => {\n    setIsExpanded(prev => !prev);\n  }, []);\n\n  return (\n    <AudioContext.Provider\n      value={{\n        currentChapter,\n        currentAssignment,\n        isPlaying,\n        isExpanded,\n        isPlayAllMode,\n        setCurrentTrack,\n        clearCurrentTrack,\n        setIsPlaying,\n        setIsExpanded,\n        setIsPlayAllMode,\n        toggleExpanded,\n        audioControls,\n        setAudioControls,\n        audioState,\n        setAudioState,\n      }}\n    >\n      {children}\n    </AudioContext.Provider>\n  );\n}\n\nexport function useAudioContext() {\n  const context = useContext(AudioContext);\n  if (!context) {\n    throw new Error('useAudioContext must be used within AudioProvider');\n  }\n  return context;\n}","size_bytes":3268},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAudio.ts":{"content":"import { useState, useRef, useEffect, useCallback } from \"react\";\n\ninterface UseAudioProps {\n  src: string;\n  onTimeUpdate?: (currentTime: number) => void;\n  onEnded?: () => void;\n  onLoadedMetadata?: (duration: number) => void;\n}\n\nexport function useAudio({ src, onTimeUpdate, onEnded, onLoadedMetadata }: UseAudioProps) {\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [volume, setVolume] = useState(1);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize audio element\n  useEffect(() => {\n    // Only initialize if src changes and is not empty\n    if (!src) {\n      setIsLoading(false);\n      return;\n    }\n\n    // Normalize URLs for comparison\n    const normalizeUrl = (url: string) => {\n      try {\n        // If it's already a full URL, return it\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          return url;\n        }\n        // Otherwise, construct full URL based on current origin\n        return new URL(url, window.location.origin).href;\n      } catch {\n        return url;\n      }\n    };\n\n    const normalizedSrc = normalizeUrl(src);\n    \n    // If we already have an audio element with the same src, don't recreate it\n    if (audioRef.current && normalizeUrl(audioRef.current.src) === normalizedSrc) {\n      // Audio element already exists with same source, just ensure it's ready\n      setIsLoading(false);\n      return;\n    }\n\n    // Pause and clean up previous audio if switching to a new track\n    if (audioRef.current) {\n      audioRef.current.pause();\n      // Remove all event listeners from old audio element\n      const oldAudio = audioRef.current;\n      // We'll clean up listeners below, just pause here\n      setIsPlaying(false);\n    }\n\n    console.log('Creating new audio element for:', src);\n    const audio = new Audio();\n    // Important for iOS: set preload to 'auto' for better compatibility\n    audio.preload = \"auto\";\n    audio.crossOrigin = \"anonymous\"; // Add CORS support\n    // iOS specific: enable inline playback\n    audio.setAttribute('playsinline', 'true');\n    audio.setAttribute('webkit-playsinline', 'true');\n    \n    // Set the source after configuring the audio element\n    audio.src = src;\n    audioRef.current = audio;\n\n    // Remove HEAD request check - let the audio element handle loading\n    // The audio element's error event will catch any loading issues\n\n    const handleTimeUpdate = () => {\n      const time = audio.currentTime;\n      setCurrentTime(time);\n      onTimeUpdate?.(time);\n    };\n\n    const handleLoadedMetadata = () => {\n      const dur = audio.duration;\n      setDuration(dur);\n      setIsLoading(false);\n      onLoadedMetadata?.(dur);\n    };\n\n    const handleEnded = () => {\n      console.log('🎵 Audio ended event fired! Button should now show play icon.');\n      setIsPlaying(false);\n      onEnded?.();\n    };\n\n    const handleCanPlay = () => {\n      setIsLoading(false);\n    };\n\n    const handleWaiting = () => {\n      setIsLoading(true);\n    };\n\n    const handleCanPlayThrough = () => {\n      setIsLoading(false);\n    };\n\n    const handleError = (e: Event) => {\n      const audioError = audio.error;\n      if (audioError) {\n        console.error(\"Audio error details:\", {\n          code: audioError.code,\n          message: audioError.message,\n          src: audio.src,\n          readyState: audio.readyState,\n          networkState: audio.networkState,\n          currentSrc: audio.currentSrc\n        });\n        // Log specific error codes\n        switch(audioError.code) {\n          case 1:\n            console.error(\"MEDIA_ERR_ABORTED: The user aborted the media playback\");\n            break;\n          case 2:\n            console.error(\"MEDIA_ERR_NETWORK: A network error occurred\");\n            break;\n          case 3:\n            console.error(\"MEDIA_ERR_DECODE: Error decoding the media\");\n            break;\n          case 4:\n            console.error(\"MEDIA_ERR_SRC_NOT_SUPPORTED: The media format is not supported\");\n            // Try to provide a fallback or better error message\n            console.error(\"Browser may not support the audio format.\");\n            break;\n        }\n      } else {\n        console.error(\"Audio error event:\", e);\n      }\n      setIsLoading(false);\n      setIsPlaying(false);\n    };\n\n    audio.addEventListener(\"timeupdate\", handleTimeUpdate);\n    audio.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\n    audio.addEventListener(\"ended\", handleEnded);\n    audio.addEventListener(\"canplay\", handleCanPlay);\n    audio.addEventListener(\"waiting\", handleWaiting);\n    audio.addEventListener(\"canplaythrough\", handleCanPlayThrough);\n    audio.addEventListener(\"error\", handleError);\n    // Remove verbose logging\n    // audio.addEventListener(\"loadstart\", () => console.log(\"Audio load started for:\", src));\n    // audio.addEventListener(\"loadeddata\", () => console.log(\"Audio data loaded for:\", src));\n    \n\n\n    // Add interval for smooth progress updates\n    const progressInterval = setInterval(() => {\n      if (audioRef.current && !audioRef.current.paused) {\n        setCurrentTime(audioRef.current.currentTime);\n      }\n    }, 100); // Update every 100ms for smooth animation\n\n    return () => {\n      clearInterval(progressInterval);\n      audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\n      audio.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\n      audio.removeEventListener(\"ended\", handleEnded);\n      audio.removeEventListener(\"canplay\", handleCanPlay);\n      audio.removeEventListener(\"waiting\", handleWaiting);\n      audio.removeEventListener(\"canplaythrough\", handleCanPlayThrough);\n      audio.removeEventListener(\"error\", handleError);\n      // Don't set src to empty string as it causes AbortError\n      // Just pause the audio and keep the reference\n      if (audioRef.current === audio) {\n        audio.pause();\n        audioRef.current = null;\n      }\n      setIsPlaying(false);\n    };\n  }, [src]); // Only depend on src, callbacks are stable via useCallback in parent\n\n  const play = useCallback(async () => {\n    if (audioRef.current) {\n      try {\n        // For iOS Safari: ensure we have the audio loaded before trying to play\n        // Don't check readyState >= 2, as iOS may report lower states but still be able to play\n        if (audioRef.current.readyState === 0) {\n          // If not loaded at all, try loading first\n          audioRef.current.load();\n          // Wait a bit for loading to start\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        \n        // Mobile Safari requires user interaction before playing\n        const playPromise = audioRef.current.play();\n        if (playPromise !== undefined) {\n          await playPromise;\n        }\n        setIsPlaying(true);\n      } catch (error) {\n        // Properly log the error\n        if (error instanceof Error) {\n          // Only log non-abort errors (AbortError happens when play is interrupted)\n          if (error.name !== 'AbortError') {\n            console.error('Error playing audio:', error.message, error.name);\n            if (error.name === 'NotAllowedError') {\n              console.log('Autoplay prevented - user interaction required');\n              // iOS specific: Try to play again after a small delay if it's a user interaction\n              setTimeout(() => {\n                audioRef.current?.play().catch(() => {});\n              }, 100);\n            } else if (error.name === 'NotSupportedError') {\n              console.error('Audio format not supported by browser');\n            }\n          }\n        } else {\n          console.error('Error playing audio:', String(error));\n        }\n        // Ensure state reflects that playback failed\n        setIsPlaying(false);\n      }\n    }\n  }, []);\n\n  const pause = useCallback(() => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n    }\n  }, []);\n\n  const togglePlay = useCallback(() => {\n    if (isPlaying) {\n      pause();\n    } else {\n      play();\n    }\n  }, [isPlaying, play, pause]);\n\n  const seek = useCallback((time: number) => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = time;\n      setCurrentTime(time);\n    }\n  }, []);\n\n  const skipForward = useCallback((seconds: number = 15) => {\n    if (audioRef.current) {\n      const newTime = Math.min(audioRef.current.currentTime + seconds, duration);\n      seek(newTime);\n    }\n  }, [seek, duration]);\n\n  const skipBackward = useCallback((seconds: number = 15) => {\n    if (audioRef.current) {\n      const newTime = Math.max(audioRef.current.currentTime - seconds, 0);\n      seek(newTime);\n    }\n  }, [seek]);\n\n  const changePlaybackRate = useCallback((rate: number) => {\n    if (audioRef.current) {\n      audioRef.current.playbackRate = rate;\n      setPlaybackRate(rate);\n    }\n  }, []);\n\n  const changeVolume = useCallback((vol: number) => {\n    if (audioRef.current) {\n      audioRef.current.volume = vol;\n      setVolume(vol);\n      setIsMuted(vol === 0);\n    }\n  }, []);\n\n  const toggleMute = useCallback(() => {\n    if (audioRef.current) {\n      if (isMuted) {\n        audioRef.current.volume = volume;\n        setIsMuted(false);\n      } else {\n        audioRef.current.volume = 0;\n        setIsMuted(true);\n      }\n    }\n  }, [isMuted, volume]);\n\n  // Setup Media Session API for background playback controls\n  useEffect(() => {\n    if ('mediaSession' in navigator && audioRef.current) {\n      navigator.mediaSession.setActionHandler('play', () => {\n        if (audioRef.current) {\n          audioRef.current.play();\n          setIsPlaying(true);\n        }\n      });\n      navigator.mediaSession.setActionHandler('pause', () => {\n        if (audioRef.current) {\n          audioRef.current.pause();\n          setIsPlaying(false);\n        }\n      });\n      navigator.mediaSession.setActionHandler('seekbackward', () => {\n        if (audioRef.current) {\n          const newTime = Math.max(audioRef.current.currentTime - 15, 0);\n          audioRef.current.currentTime = newTime;\n          setCurrentTime(newTime);\n        }\n      });\n      navigator.mediaSession.setActionHandler('seekforward', () => {\n        if (audioRef.current) {\n          const newTime = Math.min(audioRef.current.currentTime + 15, audioRef.current.duration);\n          audioRef.current.currentTime = newTime;\n          setCurrentTime(newTime);\n        }\n      });\n    }\n  }, [src]); // Only re-register when src changes\n\n  return {\n    isPlaying,\n    currentTime,\n    duration,\n    playbackRate,\n    volume,\n    isMuted,\n    isLoading,\n    play,\n    pause,\n    togglePlay,\n    seek,\n    skipForward,\n    skipBackward,\n    changePlaybackRate,\n    changeVolume,\n    toggleMute,\n  };\n}","size_bytes":10946},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/audioUtils.ts":{"content":"export function formatTime(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = Math.floor(seconds % 60);\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n\nexport function formatDuration(seconds: number | null): string {\n  if (!seconds) return \"Unknown duration\";\n  return formatTime(seconds);\n}\n\nexport function calculateProgress(currentTime: number, duration: number): number {\n  if (!duration) return 0;\n  return Math.min((currentTime / duration) * 100, 100);\n}\n\nexport function getRemainingTime(currentTime: number, duration: number): number {\n  if (!duration || currentTime >= duration) return 0;\n  return duration - currentTime;\n}\n\nexport function isNearEnd(currentTime: number, duration: number, threshold: number = 30): boolean {\n  if (!duration) return false;\n  return getRemainingTime(currentTime, duration) <= threshold;\n}\n\nexport function createAudioContext(): AudioContext | null {\n  try {\n    const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;\n    if (AudioContextClass) {\n      return new AudioContextClass();\n    }\n  } catch (error) {\n    console.warn(\"AudioContext not supported:\", error);\n  }\n  return null;\n}\n\nexport function setupMediaSession(metadata: {\n  title: string;\n  artist: string;\n  album?: string;\n  artwork?: MediaImage[];\n}): void {\n  if ('mediaSession' in navigator) {\n    navigator.mediaSession.metadata = new MediaMetadata({\n      title: metadata.title,\n      artist: metadata.artist,\n      album: metadata.album || \"The Institutes Audio Learning\",\n      artwork: metadata.artwork || [\n        {\n          src: '/favicon.ico',\n          sizes: '96x96',\n          type: 'image/png',\n        },\n      ],\n    });\n  }\n}\n\nexport function setMediaSessionHandlers(handlers: {\n  play?: () => void;\n  pause?: () => void;\n  seekbackward?: () => void;\n  seekforward?: () => void;\n  previoustrack?: () => void;\n  nexttrack?: () => void;\n}): void {\n  if ('mediaSession' in navigator) {\n    Object.entries(handlers).forEach(([action, handler]) => {\n      if (handler) {\n        navigator.mediaSession.setActionHandler(action as MediaSessionAction, handler);\n      }\n    });\n  }\n}\n\nexport function updateMediaSessionPosition(\n  currentTime: number,\n  duration: number,\n  playbackRate: number = 1\n): void {\n  if ('mediaSession' in navigator && 'setPositionState' in navigator.mediaSession) {\n    navigator.mediaSession.setPositionState({\n      duration,\n      playbackRate,\n      position: currentTime,\n    });\n  }\n}\n\nexport function getAudioMimeType(): string {\n  const audio = document.createElement('audio');\n  \n  if (audio.canPlayType('audio/mpeg')) {\n    return 'audio/mpeg';\n  } else if (audio.canPlayType('audio/mp4')) {\n    return 'audio/mp4';\n  } else if (audio.canPlayType('audio/ogg')) {\n    return 'audio/ogg';\n  }\n  \n  return 'audio/mpeg'; // fallback\n}\n\nexport function preloadAudio(src: string): Promise<HTMLAudioElement> {\n  return new Promise((resolve, reject) => {\n    const audio = new Audio();\n    audio.preload = 'metadata';\n    \n    const handleCanPlay = () => {\n      cleanup();\n      resolve(audio);\n    };\n    \n    const handleError = () => {\n      cleanup();\n      reject(new Error('Failed to load audio'));\n    };\n    \n    const cleanup = () => {\n      audio.removeEventListener('canplay', handleCanPlay);\n      audio.removeEventListener('error', handleError);\n    };\n    \n    audio.addEventListener('canplay', handleCanPlay);\n    audio.addEventListener('error', handleError);\n    \n    audio.src = src;\n  });\n}\n\nexport const PLAYBACK_SPEEDS = [0.5, 0.75, 1, 1.25, 1.5, 2] as const;\nexport type PlaybackSpeed = typeof PLAYBACK_SPEEDS[number];\n\nexport function isValidPlaybackSpeed(speed: number): speed is PlaybackSpeed {\n  return PLAYBACK_SPEEDS.includes(speed as PlaybackSpeed);\n}\n\nexport function getNextPlaybackSpeed(currentSpeed: PlaybackSpeed): PlaybackSpeed {\n  const currentIndex = PLAYBACK_SPEEDS.indexOf(currentSpeed);\n  const nextIndex = (currentIndex + 1) % PLAYBACK_SPEEDS.length;\n  return PLAYBACK_SPEEDS[nextIndex];\n}\n\nexport function getPreviousPlaybackSpeed(currentSpeed: PlaybackSpeed): PlaybackSpeed {\n  const currentIndex = PLAYBACK_SPEEDS.indexOf(currentSpeed);\n  const prevIndex = currentIndex === 0 ? PLAYBACK_SPEEDS.length - 1 : currentIndex - 1;\n  return PLAYBACK_SPEEDS[prevIndex];\n}\n","size_bytes":4358},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/offlineStorage.ts":{"content":"interface OfflineAudioData {\n  id: string;\n  chapterId: string;\n  title: string;\n  blob: Blob;\n  downloadedAt: string;\n  lastAccessedAt: string;\n}\n\ninterface ProgressData {\n  chapterId: string;\n  currentTime: number;\n  duration: number;\n  isCompleted: boolean;\n  lastUpdated: string;\n}\n\nclass OfflineStorage {\n  private dbName = 'audio-learning-offline';\n  private dbVersion = 1;\n  private db: IDBDatabase | null = null;\n\n  async initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!window.indexedDB) {\n        reject(new Error('IndexedDB not supported'));\n        return;\n      }\n\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create audio files store\n        if (!db.objectStoreNames.contains('audioFiles')) {\n          const audioStore = db.createObjectStore('audioFiles', { keyPath: 'id' });\n          audioStore.createIndex('chapterId', 'chapterId', { unique: true });\n        }\n\n        // Create progress store\n        if (!db.objectStoreNames.contains('progress')) {\n          const progressStore = db.createObjectStore('progress', { keyPath: 'chapterId' });\n        }\n\n        // Create metadata store\n        if (!db.objectStoreNames.contains('metadata')) {\n          const metadataStore = db.createObjectStore('metadata', { keyPath: 'key' });\n        }\n      };\n    });\n  }\n\n  async storeAudioFile(\n    chapterId: string,\n    title: string,\n    audioUrl: string\n  ): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    // Download the audio file\n    const response = await fetch(audioUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to download audio: ${response.statusText}`);\n    }\n\n    const blob = await response.blob();\n    const audioData: OfflineAudioData = {\n      id: `audio_${chapterId}`,\n      chapterId,\n      title,\n      blob,\n      downloadedAt: new Date().toISOString(),\n      lastAccessedAt: new Date().toISOString(),\n    };\n\n    const transaction = this.db.transaction(['audioFiles'], 'readwrite');\n    const store = transaction.objectStore('audioFiles');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.put(audioData);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getAudioFile(chapterId: string): Promise<Blob | null> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const transaction = this.db.transaction(['audioFiles'], 'readonly');\n    const store = transaction.objectStore('audioFiles');\n    const index = store.index('chapterId');\n\n    return new Promise((resolve, reject) => {\n      const request = index.get(chapterId);\n      request.onsuccess = () => {\n        const result = request.result as OfflineAudioData | undefined;\n        if (result) {\n          // Update last accessed time\n          this.updateLastAccessed(chapterId);\n          resolve(result.blob);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async deleteAudioFile(chapterId: string): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const transaction = this.db.transaction(['audioFiles'], 'readwrite');\n    const store = transaction.objectStore('audioFiles');\n    const index = store.index('chapterId');\n\n    return new Promise((resolve, reject) => {\n      const getRequest = index.get(chapterId);\n      getRequest.onsuccess = () => {\n        const result = getRequest.result as OfflineAudioData | undefined;\n        if (result) {\n          const deleteRequest = store.delete(result.id);\n          deleteRequest.onsuccess = () => resolve();\n          deleteRequest.onerror = () => reject(deleteRequest.error);\n        } else {\n          resolve(); // Already deleted\n        }\n      };\n      getRequest.onerror = () => reject(getRequest.error);\n    });\n  }\n\n  async getAllDownloadedChapters(): Promise<string[]> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const transaction = this.db.transaction(['audioFiles'], 'readonly');\n    const store = transaction.objectStore('audioFiles');\n\n    return new Promise((resolve, reject) => {\n      const request = store.getAllKeys();\n      request.onsuccess = () => {\n        const keys = request.result as string[];\n        const chapterIds = keys.map(key => key.replace('audio_', ''));\n        resolve(chapterIds);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async isAudioDownloaded(chapterId: string): Promise<boolean> {\n    const audioFile = await this.getAudioFile(chapterId);\n    return audioFile !== null;\n  }\n\n  async saveProgress(progressData: Omit<ProgressData, 'lastUpdated'>): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const fullProgressData: ProgressData = {\n      ...progressData,\n      lastUpdated: new Date().toISOString(),\n    };\n\n    const transaction = this.db.transaction(['progress'], 'readwrite');\n    const store = transaction.objectStore('progress');\n\n    return new Promise((resolve, reject) => {\n      const request = store.put(fullProgressData);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getProgress(chapterId: string): Promise<ProgressData | null> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const transaction = this.db.transaction(['progress'], 'readonly');\n    const store = transaction.objectStore('progress');\n\n    return new Promise((resolve, reject) => {\n      const request = store.get(chapterId);\n      request.onsuccess = () => {\n        resolve(request.result as ProgressData | undefined || null);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async clearProgress(chapterId: string): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const transaction = this.db.transaction(['progress'], 'readwrite');\n    const store = transaction.objectStore('progress');\n\n    return new Promise((resolve, reject) => {\n      const request = store.delete(chapterId);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getStorageUsage(): Promise<{ used: number; quota: number }> {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return {\n        used: estimate.usage || 0,\n        quota: estimate.quota || 0,\n      };\n    }\n    return { used: 0, quota: 0 };\n  }\n\n  async clearAllData(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const stores = ['audioFiles', 'progress', 'metadata'];\n    const transaction = this.db.transaction(stores, 'readwrite');\n\n    const promises = stores.map(storeName => {\n      const store = transaction.objectStore(storeName);\n      return new Promise<void>((resolve, reject) => {\n        const request = store.clear();\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n      });\n    });\n\n    await Promise.all(promises);\n  }\n\n  private async updateLastAccessed(chapterId: string): Promise<void> {\n    if (!this.db) return;\n\n    const transaction = this.db.transaction(['audioFiles'], 'readwrite');\n    const store = transaction.objectStore('audioFiles');\n    const index = store.index('chapterId');\n\n    const getRequest = index.get(chapterId);\n    getRequest.onsuccess = () => {\n      const result = getRequest.result as OfflineAudioData | undefined;\n      if (result) {\n        result.lastAccessedAt = new Date().toISOString();\n        store.put(result);\n      }\n    };\n  }\n\n  async createAudioUrl(chapterId: string): Promise<string | null> {\n    const blob = await this.getAudioFile(chapterId);\n    if (blob) {\n      return URL.createObjectURL(blob);\n    }\n    return null;\n  }\n\n  revokeAudioUrl(url: string): void {\n    URL.revokeObjectURL(url);\n  }\n}\n\nexport const offlineStorage = new OfflineStorage();\n\n// Initialize offline storage when the module is loaded\nofflineStorage.initialize().catch(error => {\n  console.warn('Failed to initialize offline storage:', error);\n  // Set a flag that can be checked by components\n  (offlineStorage as any).initError = error;\n});\n\nexport default offlineStorage;\n","size_bytes":8619},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1391},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useEffect } from \"react\";\nimport { AdminPanel } from \"@/components/AdminPanel\";\nimport { AppHeader } from \"@/components/AppHeader\";\n\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function Admin() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [location, navigate] = useLocation();\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (!isLoading && (!user || !user.isAdmin)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required\",\n        variant: \"destructive\",\n      });\n      navigate(\"/assignments\");\n    }\n  }, [user, isLoading, toast, navigate]);\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <AppHeader />\n        <main className=\"max-w-screen-xl mx-auto px-4 py-6\">\n          <div className=\"text-center\">\n            <p className=\"text-slate-600\">Loading...</p>\n          </div>\n        </main>\n\n      </div>\n    );\n  }\n\n  if (!user?.isAdmin) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <AppHeader />\n      \n      <main className=\"max-w-screen-xl mx-auto px-4\">\n        <AdminPanel />\n      </main>\n\n\n    </div>\n  );\n}\n","size_bytes":1405},"client/src/pages/assignments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/AppHeader\";\nimport { useAudioContext } from \"@/contexts/AudioContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause, Download, ChevronRight, CheckCircle, CheckCircle2, Trash2, Loader2, ListMusic } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Course, Assignment, Chapter, UserProgress, DownloadedContent } from \"@shared/schema\";\n\nexport default function Assignments() {\n  const { user } = useAuth();\n  const [location, navigate] = useLocation();\n  const { setCurrentTrack, currentChapter, setIsPlayAllMode } = useAudioContext();\n  const [currentAssignment, setCurrentAssignment] = useState<Assignment | undefined>(undefined);\n\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const currentCourse = courses.length > 0 ? courses[0] : undefined; // For now, use first course\n\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/courses\", currentCourse?.id, \"assignments\"],\n    enabled: !!currentCourse?.id,\n  });\n\n  // Set first assignment as default when assignments load\n  if (assignments.length > 0 && !currentAssignment) {\n    setCurrentAssignment(assignments[0]);\n  }\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n  };\n\n  const handleAssignmentChange = (assignment: Assignment) => {\n    setCurrentAssignment(assignment);\n  };\n\n  const handleChapterSelect = (chapter: Chapter) => {\n    if (currentAssignment && chapter) {\n      setCurrentTrack(chapter, currentAssignment);\n    }\n  };\n\n  const isLoading = coursesLoading || assignmentsLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <AppHeader \n          currentCourse={currentCourse} \n          currentAssignment={currentAssignment}\n          onAssignmentChange={handleAssignmentChange}\n        />\n        <main className=\"max-w-screen-xl mx-auto px-4 py-6\">\n          <div className=\"text-center\">\n            <p className=\"text-slate-600\">Loading...</p>\n          </div>\n        </main>\n\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-24\">\n      <AppHeader \n        currentCourse={currentCourse} \n        currentAssignment={currentAssignment}\n        onAssignmentChange={handleAssignmentChange}\n      />\n      \n      <main className=\"max-w-screen-xl mx-auto px-3 sm:px-4\">\n        {currentAssignment ? (\n          <div className=\"py-4 sm:py-6\">\n            <AssignmentHeader \n              assignment={currentAssignment} \n              onChapterSelect={handleChapterSelect}\n            />\n            <ChapterListContent\n              assignment={currentAssignment}\n              onChapterSelect={handleChapterSelect}\n            />\n          </div>\n        ) : (\n          <div className=\"py-4 sm:py-6\">\n            <h2 className=\"text-xl sm:text-2xl font-bold text-slate-800 mb-2\">No Assignment Selected</h2>\n            <p className=\"text-sm sm:text-base text-slate-600\">Please select an assignment from the dropdown in the header.</p>\n          </div>\n        )}\n      </main>\n\n\n    </div>\n  );\n}\n\n// New component for assignment header with download all functionality\nfunction AssignmentHeader({ \n  assignment, \n  onChapterSelect \n}: { \n  assignment: Assignment;\n  onChapterSelect: (chapter: Chapter) => void;\n}) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { setIsPlayAllMode, isPlayAllMode, currentChapter } = useAudioContext();\n  \n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", assignment.id, \"chapters\"],\n  });\n  \n  const { data: downloads = [] } = useQuery<DownloadedContent[]>({\n    queryKey: [\"/api/downloads\"],\n  });\n  \n  const downloadedChapterIds = downloads.map(d => d.chapterId);\n  const allChaptersDownloaded = chapters.length > 0 && chapters.every(ch => downloadedChapterIds.includes(ch.id));\n  const someChaptersDownloaded = chapters.some(ch => downloadedChapterIds.includes(ch.id));\n  \n  const [downloadingChapters, setDownloadingChapters] = useState<string[]>([]);\n  const [completedDownloads, setCompletedDownloads] = useState<number>(0);\n  \n  const chaptersToDownload = chapters.filter(ch => !downloadedChapterIds.includes(ch.id));\n  const totalToDownload = downloadingChapters.length || chaptersToDownload.length;\n  const downloadProgress = totalToDownload > 0 ? (completedDownloads / totalToDownload) * 100 : 0;\n  \n  const downloadAllMutation = useMutation({\n    mutationFn: async () => {\n      const toDownload = chapters.filter(ch => !downloadedChapterIds.includes(ch.id));\n      if (toDownload.length === 0) {\n        toast({\n          title: \"Already downloaded\",\n          description: \"All chapters are already downloaded\",\n        });\n        return [];\n      }\n      \n      setDownloadingChapters(toDownload.map(ch => ch.id));\n      setCompletedDownloads(0);\n      \n      const results = [];\n      for (const chapter of toDownload) {\n        try {\n          const result = await apiRequest(\"POST\", `/api/download/${chapter.id}`);\n          results.push(result);\n          setCompletedDownloads(prev => prev + 1);\n          queryClient.invalidateQueries({ queryKey: [\"/api/downloads\"] });\n        } catch (error) {\n          console.error(`Failed to download chapter ${chapter.id}:`, error);\n        }\n      }\n      \n      return results;\n    },\n    onSuccess: (results) => {\n      const successCount = results.length;\n      if (successCount === chaptersToDownload.length) {\n        toast({\n          title: \"Download complete\",\n          description: `All ${successCount} chapters have been downloaded`,\n        });\n      } else {\n        toast({\n          title: \"Partial download\",\n          description: `Downloaded ${successCount} of ${chaptersToDownload.length} chapters`,\n        });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/downloads\"] });\n      setDownloadingChapters([]);\n      setCompletedDownloads(0);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setDownloadingChapters([]);\n      setCompletedDownloads(0);\n    },\n  });\n  \n  const isDownloading = downloadAllMutation.isPending || downloadingChapters.length > 0;\n  \n  const handlePlayAll = () => {\n    if (isPlayAllMode) {\n      // Toggle off Play All mode (but keep playing current chapter)\n      setIsPlayAllMode(false);\n    } else {\n      // Toggle on Play All mode\n      if (chapters.length > 0 && chapters[0]) {\n        setIsPlayAllMode(true);\n        // Only start playing if nothing is currently playing\n        if (!currentChapter) {\n          onChapterSelect(chapters[0]);\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"mb-4 sm:mb-6\">\n      <div className=\"flex items-center justify-between mb-3 sm:mb-4 gap-2\">\n        <h2 className=\"text-lg sm:text-2xl font-bold text-slate-800 line-clamp-2\">\n          {assignment.title}\n        </h2>\n        <div className=\"flex items-center gap-2\">\n          {!allChaptersDownloaded && (\n            <button\n              onClick={() => downloadAllMutation.mutate()}\n              disabled={isDownloading}\n              className=\"flex items-center gap-2 px-3 py-2 sm:px-4 sm:py-2.5 border-2 border-[#f5a07c] rounded-lg bg-[#fef6f3] hover:bg-[#fee8e0] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed font-medium text-slate-800\"\n              title=\"Download All Chapters\"\n            >\n              {isDownloading ? (\n                <>\n                  <Loader2 className=\"h-5 w-5 animate-spin text-[#ed7738]\" />\n                  <span className=\"hidden sm:inline\">Downloading...</span>\n                </>\n              ) : (\n                <>\n                  <Download className=\"h-5 w-5 text-[#ed7738]\" />\n                  <span className=\"hidden sm:inline\">Download All</span>\n                </>\n              )}\n            </button>\n          )}\n          {allChaptersDownloaded && (\n            <button\n              disabled\n              className=\"flex items-center gap-2 px-3 py-2 sm:px-4 sm:py-2.5 border-2 border-green-400 rounded-lg bg-green-50 font-medium text-green-700 cursor-default\"\n              title=\"All Chapters Downloaded\"\n            >\n              <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n              <span className=\"hidden sm:inline\">All Downloaded</span>\n            </button>\n          )}\n          <Button\n            onClick={handlePlayAll}\n            className={`w-12 h-12 sm:w-14 sm:h-14 rounded-full flex items-center justify-center p-0 shadow-lg hover:shadow-xl transition-all duration-200 ${\n              isPlayAllMode \n                ? \"bg-green-600 hover:bg-green-700 ring-2 ring-green-400 ring-offset-2\" \n                : \"bg-[#ed7738] hover:bg-[#d96429]\"\n            }`}\n            disabled={chapters.length === 0}\n            title={isPlayAllMode ? \"Stop Play All Mode\" : \"Play All Chapters\"}\n          >\n            {isPlayAllMode ? (\n              <ListMusic className=\"h-5 w-5 sm:h-6 sm:w-6 text-white\" />\n            ) : (\n              <Play className=\"h-5 w-5 sm:h-6 sm:w-6 text-white ml-0.5\" fill=\"currentColor\" />\n            )}\n          </Button>\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\n// Component to display chapters without the back button and header\nfunction ChapterListContent({ assignment, onChapterSelect }: { \n  assignment: Assignment; \n  onChapterSelect: (chapter: Chapter) => void;\n}) {\n  const { data: chapters = [], isLoading } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", assignment.id, \"chapters\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-5 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {chapters.map((chapter) => (\n        <ChapterCard\n          key={chapter.id}\n          chapter={chapter}\n          onPlay={() => onChapterSelect(chapter)}\n        />\n      ))}\n    </div>\n  );\n}\n\ninterface ChapterCardProps {\n  chapter: Chapter;\n  onPlay: () => void;\n}\n\nfunction ChapterCard({ chapter, onPlay }: ChapterCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: progress } = useQuery<UserProgress>({\n    queryKey: [\"/api/progress\", chapter.id],\n  });\n  \n  const { data: downloads = [] } = useQuery<DownloadedContent[]>({\n    queryKey: [\"/api/downloads\"],\n  });\n  \n  const isDownloaded = downloads.some(d => d.chapterId === chapter.id);\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", `/api/downloads/${chapter.id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Download removed\",\n        description: \"Chapter has been removed from offline storage\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/downloads\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to remove download\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatDuration = (seconds: number | null) => {\n    if (!seconds) return \"Unknown duration\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow cursor-pointer relative\" onClick={onPlay}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n              progress?.isCompleted \n                ? \"bg-green-100\" \n                : \"bg-[#ed7738]/10\"\n            }`}>\n              {progress?.isCompleted ? (\n                <CheckCircle className=\"text-green-600\" size={20} />\n              ) : (\n                <Play className=\"text-[#ed7738]\" size={20} />\n              )}\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-slate-800\">\n                {chapter.title}\n              </h3>\n              <div className=\"flex items-center gap-2 text-sm text-slate-500\">\n                <span>{formatDuration(chapter.duration)}</span>\n                {isDownloaded && (\n                  <>\n                    <span>•</span>\n                    <span className=\"text-[#003370] flex items-center gap-1\">\n                      <CheckCircle2 className=\"h-3 w-3\" />\n                      Offline\n                    </span>\n                  </>\n                )}\n                {progress?.currentTime && progress.currentTime > 0 && !progress.isCompleted && (\n                  <>\n                    <span>•</span>\n                    <span>\n                      {(() => {\n                        const remaining = Math.floor((chapter.duration || 0) - progress.currentTime);\n                        return remaining > 0 ? `${formatDuration(remaining)} remaining` : '';\n                      })()}\n                    </span>\n                  </>\n                )}\n                {progress?.isCompleted && !isDownloaded && (\n                  <>\n                    <span>•</span>\n                    <span className=\"text-green-600\">Completed</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {isDownloaded && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  deleteMutation.mutate();\n                }}\n                disabled={deleteMutation.isPending}\n                className=\"p-2 text-slate-400 hover:text-red-600\"\n                title=\"Remove download\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15012},"client/src/pages/chapters.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/AppHeader\";\nimport { ChapterList } from \"@/components/ChapterList\";\nimport { useAudioContext } from \"@/contexts/AudioContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport type { Assignment, Chapter } from \"@shared/schema\";\n\nexport default function Chapters() {\n  const { user } = useAuth();\n  const [location, navigate] = useLocation();\n  const { setCurrentTrack, currentChapter } = useAudioContext();\n  \n  // Get assignment ID from URL params\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const assignmentId = urlParams.get('assignment');\n\n  const { data: assignment } = useQuery<Assignment>({\n    queryKey: [\"/api/assignments\", assignmentId],\n    enabled: !!assignmentId,\n  });\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n  };\n\n  const handleBack = () => {\n    navigate(\"/assignments\");\n  };\n\n  const handleChapterSelect = (chapter: Chapter) => {\n    if (assignment) {\n      setCurrentTrack(chapter, assignment);\n    }\n  };\n\n  if (!assignment) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <AppHeader />\n        <main className=\"max-w-screen-xl mx-auto px-4 py-6\">\n          <div className=\"text-center\">\n            <p className=\"text-slate-600\">Assignment not found.</p>\n          </div>\n        </main>\n\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-24\">\n      <AppHeader />\n      \n      <main className=\"max-w-screen-xl mx-auto px-4\">\n        <ChapterList\n          assignment={assignment}\n          onBack={handleBack}\n          onChapterSelect={handleChapterSelect}\n          currentlyPlaying={currentChapter?.id}\n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":1818},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/player.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/AppHeader\";\nimport { AudioPlayer } from \"@/components/AudioPlayer\";\n\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport type { Assignment, Chapter } from \"@shared/schema\";\n\nexport default function Player() {\n  const { user } = useAuth();\n  const [location, navigate] = useLocation();\n  \n  // Get IDs from URL params\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const assignmentId = urlParams.get('assignment');\n  const chapterId = urlParams.get('chapter');\n\n  const { data: assignment } = useQuery<Assignment>({\n    queryKey: [\"/api/assignments\", assignmentId],\n    enabled: !!assignmentId,\n  });\n\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/assignments\", assignmentId, \"chapters\"],\n    enabled: !!assignmentId,\n  });\n\n  // Find the current chapter from the chapters array\n  const chapter = chapters.find(ch => ch.id === chapterId);\n\n  // Debug logging\n  console.log(\"Player - chapterId:\", chapterId);\n  console.log(\"Player - chapters array:\", chapters);\n  console.log(\"Player - found chapter:\", chapter);\n  if (chapter) {\n    console.log(\"Player - chapter details:\", {\n      id: chapter.id,\n      title: chapter.title,\n      audioUrl: chapter.audioUrl,\n      hasAudioUrl: !!chapter.audioUrl\n    });\n  }\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n  };\n\n  const handleBack = () => {\n    navigate(`/chapters?assignment=${assignmentId}`);\n  };\n\n  const getCurrentChapterIndex = () => {\n    if (!chapter) return -1;\n    return chapters.findIndex(ch => ch.id === chapter.id);\n  };\n\n  const handlePrevious = () => {\n    const currentIndex = getCurrentChapterIndex();\n    if (currentIndex > 0) {\n      const prevChapter = chapters[currentIndex - 1];\n      navigate(`/player?assignment=${assignmentId}&chapter=${prevChapter.id}`);\n    }\n  };\n\n  const handleNext = () => {\n    const currentIndex = getCurrentChapterIndex();\n    if (currentIndex < chapters.length - 1) {\n      const nextChapter = chapters[currentIndex + 1];\n      navigate(`/player?assignment=${assignmentId}&chapter=${nextChapter.id}`);\n    }\n  };\n\n  const currentIndex = getCurrentChapterIndex();\n  const hasPrevious = currentIndex > 0;\n  const hasNext = currentIndex < chapters.length - 1;\n\n  if (!assignment || !chapter) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <AppHeader />\n        <main className=\"max-w-screen-xl mx-auto px-4 py-6\">\n          <div className=\"text-center\">\n            <p className=\"text-slate-600\">Content not found.</p>\n          </div>\n        </main>\n\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <AppHeader />\n      \n      <main className=\"max-w-screen-xl mx-auto px-4\">\n        <AudioPlayer\n          assignment={assignment}\n          chapter={chapter}\n          onBack={handleBack}\n          onPrevious={handlePrevious}\n          onNext={handleNext}\n          hasPrevious={hasPrevious}\n          hasNext={hasNext}\n        />\n      </main>\n\n\n    </div>\n  );\n}\n","size_bytes":3139},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/audio-visualizer.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AudioVisualizerProps {\n  isPlaying: boolean;\n  className?: string;\n}\n\nexport function AudioVisualizer({ isPlaying, className }: AudioVisualizerProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const bars = container.querySelectorAll('.visualizer-bar');\n    \n    if (isPlaying) {\n      bars.forEach((bar, index) => {\n        const element = bar as HTMLElement;\n        element.style.animationDelay = `${index * 0.1}s`;\n        element.style.animationPlayState = 'running';\n      });\n    } else {\n      bars.forEach((bar) => {\n        const element = bar as HTMLElement;\n        element.style.animationPlayState = 'paused';\n      });\n    }\n  }, [isPlaying]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\"flex items-end justify-center gap-1 h-32\", className)}\n    >\n      {Array.from({ length: 15 }, (_, i) => (\n        <div\n          key={i}\n          className={cn(\n            \"visualizer-bar bg-primary w-1 rounded-full transition-all duration-300\",\n            \"animate-[wave_1.5s_ease-in-out_infinite]\"\n          )}\n          style={{\n            height: `${20 + Math.random() * 60}%`,\n            animationDelay: `${i * 0.1}s`,\n            animationPlayState: isPlaying ? 'running' : 'paused',\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":1470},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-card\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1860},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/circular-progress.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface CircularProgressProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: number\n  max?: number\n  size?: number\n  strokeWidth?: number\n  showValue?: boolean\n  isPlaying?: boolean\n}\n\nexport function CircularProgress({\n  value,\n  max = 100,\n  size = 200,\n  strokeWidth = 8,\n  showValue = false,\n  isPlaying = false,\n  className,\n  ...props\n}: CircularProgressProps) {\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100))\n  const radius = (size - strokeWidth) / 2\n  const circumference = radius * 2 * Math.PI\n  const offset = circumference - (percentage / 100) * circumference\n\n  return (\n    <div\n      className={cn(\"relative inline-flex items-center justify-center\", className)}\n      style={{ width: size, height: size }}\n      {...props}\n    >\n      <svg\n        className=\"transform -rotate-90\"\n        width={size}\n        height={size}\n      >\n        {/* Background circle */}\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          className=\"text-border opacity-20\"\n        />\n        \n        {/* Progress circle */}\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeDasharray={circumference}\n          strokeDashoffset={offset}\n          className=\"text-primary\"\n          style={{\n            strokeLinecap: \"round\",\n            transition: \"stroke-dashoffset 0.1s linear\",\n          }}\n        />\n      </svg>\n      \n      {/* Center content */}\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        {showValue ? (\n          <span className=\"text-2xl font-medium text-foreground\">\n            {Math.round(percentage)}%\n          </span>\n        ) : (\n          props.children\n        )}\n      </div>\n    </div>\n  )\n}\n\ninterface LinearProgressProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: number\n  max?: number\n  height?: number\n  showLabels?: boolean\n}\n\nexport function LinearProgress({\n  value,\n  max = 100,\n  height = 4,\n  showLabels = false,\n  className,\n  ...props\n}: LinearProgressProps) {\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100))\n\n  return (\n    <div className={cn(\"w-full\", className)} {...props}>\n      {showLabels && (\n        <div className=\"flex justify-between text-xs text-muted-foreground mb-1\">\n          <span>0</span>\n          <span>{max}</span>\n        </div>\n      )}\n      <div \n        className=\"relative w-full bg-border/20 rounded-full overflow-hidden\"\n        style={{ height }}\n      >\n        <div\n          className=\"absolute top-0 left-0 h-full bg-primary rounded-full\"\n          style={{ \n            width: `${percentage}%`,\n            transition: \"width 0.1s linear\"\n          }}\n        />\n      </div>\n    </div>\n  )\n}","size_bytes":3004},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}